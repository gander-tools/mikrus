name: Release Candidate Testing

on:
  push:
    tags:
      - 'v*.*.*-rc.*'
      - 'v*.*.*-beta.*'
      - 'v*.*.*-alpha.*'

permissions:
  contents: read

concurrency:
  group: release-candidate-${{ github.ref }}
  cancel-in-progress: false

jobs:
  test-release-candidate:
    name: Test Release Candidate
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write  # Only for NPM publish
    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@f4d14e03ff726c06358e5557344e1da148b56cf7 # v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Add node_modules/.bin to PATH
        run: echo "./node_modules/.bin" >> $GITHUB_PATH

      - name: Run comprehensive tests
        run: |
          echo "ðŸ§ª Running comprehensive test suite..."
          bun run test:coverage
          bun run lint
          bunx @biomejs/biome ci

      - name: Build and validate package
        run: |
          echo "ðŸ“¦ Building release candidate..."
          bun run build
          
          # Validate CLI functionality
          ./bin/mikrus --compiled-build --version
          ./bin/mikrus --compiled-build --help
          
          # Test package contents
          npm pack --dry-run
          echo "âœ… Package validation complete"

      - name: Extract version from tag
        id: get_version
        run: |
          VERSION="${GITHUB_REF/refs\/tags\/v/}"
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-(alpha|beta|rc)\.[0-9]+)?$ ]]; then
            echo "Error: Invalid version format: $VERSION"
            exit 1
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Create RC artifacts
        run: |
          mkdir -p release
          cp -r build/ bin/ package.json README.md release/
          [ -f LICENSE ] && cp LICENSE release/ || echo "LICENSE file not found, skipping"
          cd release
          tar -czf "../mikrus-$VERSION-rc.tar.gz" .
          cd ..
          zip -r "mikrus-$VERSION-rc.zip" release/
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }}

      - name: Test NPM publish (dry run)
        run: |
          echo "ðŸ§ª Testing NPM publish (dry run)..."
          npm publish --dry-run --access public
          echo "âœ… NPM publish dry run successful"

      - name: Publish Release Candidate to NPM
        if: contains(github.ref, '-rc.') || contains(github.ref, '-beta.') || contains(github.ref, '-alpha.')
        run: |
          echo "ðŸ“¦ Publishing release candidate to NPM..."
          npm publish --tag prerelease --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Pre-release
        uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2.3.2
        permissions:
          contents: write  # Required only for release creation
        with:
          name: Release Candidate ${{ steps.get_version.outputs.VERSION }}
          prerelease: true
          body: |
            ## Release Candidate ${{ steps.get_version.outputs.VERSION }}
            
            This is a pre-release version for testing purposes.
            
            ### Installation
            ```bash
            npm install -g mikrus@prerelease
            ```
            
            ### Changes
            - Release candidate for version ${{ steps.get_version.outputs.VERSION }}
            - Please test thoroughly before stable release
            
            ### Testing
            After installation, verify functionality:
            ```bash
            mikrus --version
            mikrus --help
            ```
          files: |
            mikrus-${{ steps.get_version.outputs.VERSION }}-rc.tar.gz
            mikrus-${{ steps.get_version.outputs.VERSION }}-rc.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}