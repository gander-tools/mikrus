name: Production Release & Publishing

# Production release workflow with GitHub Release and NPM publishing
# Triggers: Git tags matching v*.*.* (semantic versioning)
# Purpose: CI verification → Build → GitHub Release → NPM publish with provenance

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  check-ci-status:
    name: "🔍 Pre-flight: CI Pipeline Verification"
    # Ensures CI pipeline passed successfully before allowing release
    runs-on: ubuntu-latest
    steps:
      - name: "✅ Validation: Verify CI Success for Tag Commit"
        # Queries GitHub API to confirm CI workflow completed successfully for this commit
        uses: actions/github-script@v7
        with:
          script: |
            const { data: workflows } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'ci.yml',
              head_sha: context.sha,
              status: 'completed'
            });
            
            const ciRun = workflows.workflow_runs[0];
            if (!ciRun) {
              core.setFailed('No CI workflow run found for this commit');
              return;
            }
            
            if (ciRun.conclusion !== 'success') {
              core.setFailed(`CI Pipeline failed with status: ${ciRun.conclusion}`);
              return;
            }
            
            console.log('✅ CI Pipeline passed successfully');

  build-and-release:
    name: "🏗️ GitHub: Build & Create Release"
    # Creates production build, archives, checksums, and GitHub release
    runs-on: ubuntu-latest
    needs: [check-ci-status]
    steps:
      - name: "📥 Repository: Full History Checkout"
        # Downloads complete git history for changelog and version extraction
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
        with:
          fetch-depth: 0

      - name: "⚡ Runtime: Setup Bun Environment"
        # Configures Bun runtime for fast dependency installation and building
        uses: oven-sh/setup-bun@f4d14e03ff726c06358e5557344e1da148b56cf7 # v1
        with:
          bun-version: latest

      - name: "📦 Dependencies: Install Frozen Lockfile"
        # Installs exact dependencies from lockfile for reproducible builds
        run: bun install --frozen-lockfile

      - name: "🛣️ Environment: Add CLI Tools to PATH"
        # Makes node_modules/.bin tools available in subsequent steps
        run: echo "./node_modules/.bin" >> $GITHUB_PATH

      - name: "🧪 Quality: Execute Test Suite"
        # Runs complete test suite to ensure release quality
        run: bun run test

      - name: "✨ Code Quality: Lint & Format Check"
        # Validates code style and formatting before release
        run: bunx @biomejs/biome ci

      - name: "🔨 Build: Compile Production Release"
        # Compiles TypeScript and creates production build artifacts
        run: bun run build

      - name: "🏷️ Version: Extract & Validate from Git Tag"
        # Extracts semantic version from git tag with security validation
        id: get_version
        run: |
          VERSION="${GITHUB_REF/refs\/tags\/v/}"
          # Validate version format to prevent injection
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-.+)?$ ]]; then
            echo "Error: Invalid version format: $VERSION"
            exit 1
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: "📦 Archive: Create Release Packages"
        # Creates tar.gz and zip archives with all necessary release files
        run: |
          mkdir -p release
          cp -r build/ bin/ package.json README.md release/
          [ -f LICENSE ] && cp LICENSE release/ || echo "LICENSE file not found, skipping"
          cd release
          tar -czf "../mikrus-$VERSION.tar.gz" .
          cd ..
          zip -r "mikrus-$VERSION.zip" release/
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }}

      - name: "📝 Documentation: Generate Release Notes"
        # Creates release notes from CHANGELOG.md or git history
        id: release_notes
        run: |
          if [ -f CHANGELOG.md ]; then
            echo "Found CHANGELOG.md, extracting notes for version $VERSION"
            # Extract release notes from CHANGELOG.md if it exists - using grep instead of awk for security
            grep -A 100 "^## \[\?$VERSION\]\?" CHANGELOG.md | grep -B 100 -m 2 "^## " | head -n -1 > release_notes.txt || echo "## What's Changed" > release_notes.txt
          else
            echo "## What's Changed" > release_notes.txt
            echo "Release $VERSION" >> release_notes.txt
            echo "" >> release_notes.txt
            echo "### Recent Commits" >> release_notes.txt
            # Safer git log command with explicit limits
            git log --pretty=format:"- %s" --no-merges --max-count=10 >> release_notes.txt 2>/dev/null || echo "- Initial release" >> release_notes.txt
          fi
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }}

      - name: "🔐 Security: Generate SHA256 Checksums"
        # Creates cryptographic checksums for download integrity verification
        run: |
          sha256sum "mikrus-$VERSION.tar.gz" > "mikrus-$VERSION.tar.gz.sha256"
          sha256sum "mikrus-$VERSION.zip" > "mikrus-$VERSION.zip.sha256"
          echo "Generated checksums:"
          cat "mikrus-$VERSION.tar.gz.sha256"
          cat "mikrus-$VERSION.zip.sha256"
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }}

      - name: "🚀 GitHub: Publish Release"
        # Creates GitHub release with archives and checksums
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # v1
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          body_path: release_notes.txt
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.VERSION, '-') }}
          files: |
            mikrus-${{ steps.get_version.outputs.VERSION }}.tar.gz
            mikrus-${{ steps.get_version.outputs.VERSION }}.zip
            mikrus-${{ steps.get_version.outputs.VERSION }}.tar.gz.sha256
            mikrus-${{ steps.get_version.outputs.VERSION }}.zip.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-test:
    name: "🧪 Integration: CLI End-to-End Validation"
    # Comprehensive build and integration testing before NPM publication
    runs-on: ubuntu-latest
    needs: [check-ci-status]
    permissions:
      contents: read
    steps:
      - name: "📥 Repository: Checkout Release Code"
        # Downloads repository for integration testing
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: "🟢 Runtime: Setup Node.js LTS"
        # Configures Node.js for NPM compatibility testing
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: 20

      - name: "⚡ Runtime: Setup Bun Environment"
        # Configures Bun runtime for build and testing
        uses: oven-sh/setup-bun@f4d14e03ff726c06358e5557344e1da148b56cf7 # v1
        with:
          bun-version: latest

      - name: "💾 Cache: Restore Dependencies"
        # Caches dependencies for faster builds
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}

      - name: "📦 Dependencies: Install Frozen Lockfile"
        # Installs exact dependencies for consistent builds
        run: bun install --frozen-lockfile

      - name: "🛣️ Environment: Add CLI Tools to PATH"
        # Makes CLI tools available for testing
        run: echo "./node_modules/.bin" >> $GITHUB_PATH

      - name: "🧪 Quality: Execute Test Suite"
        # Runs all tests to ensure functionality
        run: bun run test

      - name: "✨ Code Quality: Lint & Format Validation"
        # Ensures code quality before publication
        run: bunx @biomejs/biome ci

      - name: "🔨 Build: Create Production Binary"
        # Compiles final production build
        run: bun run build

      - name: "🔍 Integration: CLI Help Command Test"
        # Tests compiled CLI help functionality
        run: |
          output=$(./bin/mikrus --compiled-build --help)
          echo "$output"
          if ! echo "$output" | grep -q "mikrus version"; then
            echo "ERROR: Help output does not contain expected version info"
            exit 1
          fi

      - name: "📋 Integration: CLI Version Command Test"
        # Validates CLI version output format
        run: |
          output=$(./bin/mikrus --compiled-build --version)
          echo "Version output: $output"
          if ! echo "$output" | grep -E "^[0-9]+\.[0-9]+\.[0-9]+"; then
            echo "ERROR: Version output does not match expected format (semver)"
            exit 1
          fi

  publish-npm:
    name: "📦 NPM: Publish with Provenance"
    # NPM publication with cryptographic provenance and integrity verification
    runs-on: ubuntu-latest
    needs: [build-and-release, build-and-test]
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-')
    permissions:
      contents: read
      id-token: write  # Required for npm provenance
    steps:
      - name: "📥 Repository: Checkout for Publishing"
        # Downloads repository for NPM package preparation
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: "🟢 Runtime: Setup Node.js with NPM Registry"
        # Configures Node.js with NPM registry authentication
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/

      - name: "⚡ Runtime: Setup Bun Environment"
        # Configures Bun for build and publishing
        uses: oven-sh/setup-bun@f4d14e03ff726c06358e5557344e1da148b56cf7 # v1
        with:
          bun-version: latest

      - name: "📦 Dependencies: Install for Publishing"
        # Installs dependencies needed for package building
        run: bun install --frozen-lockfile

      - name: "🛣️ Environment: Add CLI Tools to PATH"
        # Makes build tools available
        run: echo "./node_modules/.bin" >> $GITHUB_PATH

      - name: "🔨 Build: Create NPM Package"
        # Creates final NPM package build
        run: bun run build

      - name: "🔑 Security: Verify NPM Token Configuration"
        # Validates NPM authentication is properly configured
        run: |
          if [ -z "$NODE_AUTH_TOKEN" ]; then
            echo "❌ ERROR: NPM_TOKEN not configured in GitHub secrets"
            echo "Please configure NPM_TOKEN in organization secrets:"
            echo "https://github.com/organizations/gander-tools/settings/secrets/actions"
            exit 1
          else
            echo "✅ NPM token is configured"
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: "🔍 Quality: Verify Package Integrity"
        # Pre-publication integrity and content verification
        run: |
          echo "Verifying package contents..."
          npm pack --dry-run
          echo "Package size check:"
          du -sh .

      - name: "🚀 NPM: Publish with Cryptographic Provenance"
        # Publishes to NPM with provenance for supply chain security
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: "✅ Verification: Confirm NPM Publication"
        # Verifies successful publication and package availability
        run: |
          echo "Waiting for package to propagate..."
          sleep 30
          # Extract version from tag safely
          VERSION="${GITHUB_REF/refs\/tags\/v/}"
          npm view "mikrus@$VERSION" --json