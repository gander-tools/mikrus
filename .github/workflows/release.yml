name: "🏁 Deno Release & JSR Publishing"

# Production release workflow for Deno with binary compilation and JSR publishing
# Triggers: Git tags matching v*.*.* (semantic versioning with 'v' prefix)
# Purpose: CI verification → Compile Binaries → GitHub Release → JSR publish

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (without v prefix, e.g., 1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  id-token: write  # Required for JSR provenance

jobs:
  validate-tag:
    name: "🏷️ Validation: Verify Tag Format"
    runs-on: ubuntu-latest
    steps:
      - name: "📥 Repository: Checkout Code"
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
        with:
          fetch-depth: 0

      - name: "🏷️ Validation: Check Tag Format"
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            TAG_NAME="v${VERSION}"
            echo "Using manual input version: $VERSION"
            
            # Check if tag exists
            if ! git tag -l | grep -q "^${TAG_NAME}$"; then
              echo "❌ Tag ${TAG_NAME} does not exist!"
              echo "Please create the tag first:"
              echo "  git tag ${TAG_NAME}"
              echo "  git push origin ${TAG_NAME}"
              exit 1
            fi
          else
            TAG_NAME="${GITHUB_REF#refs/tags/}"
            VERSION="${TAG_NAME#v}"
            echo "Using git tag: $TAG_NAME"
          fi
          
          # Validate version format (semantic versioning)
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-(alpha|beta|rc)\.[0-9]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-alpha.N"
            exit 1
          fi
          
          echo "✅ Valid version: $VERSION (tag: $TAG_NAME)"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

  check-ci-status:
    name: "🔍 Pre-flight: Deno CI Verification"
    runs-on: ubuntu-latest
    needs: [validate-tag]
    steps:
      - name: "✅ Validation: Verify Deno CI Success"
        uses: actions/github-script@v7
        with:
          script: |
            const { data: workflows } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'ci.yml',
              head_sha: context.sha,
              status: 'completed'
            });
            
            const ciRun = workflows.workflow_runs[0];
            if (!ciRun) {
              core.setFailed('No Deno CI workflow run found for this commit');
              return;
            }
            
            if (ciRun.conclusion !== 'success') {
              core.setFailed(`Deno CI Pipeline failed with status: ${ciRun.conclusion}`);
              return;
            }
            
            console.log('✅ Deno CI Pipeline passed successfully');

  build-binaries:
    name: "🏗️ Build: Multi-platform Binaries"
    runs-on: ubuntu-latest
    needs: [check-ci-status]
    strategy:
      matrix:
        target:
          - { name: "linux", target: "x86_64-unknown-linux-gnu", ext: "" }
          - { name: "windows", target: "x86_64-pc-windows-msvc", ext: ".exe" }
          - { name: "macos-x64", target: "x86_64-apple-darwin", ext: "" }
          - { name: "macos-arm64", target: "aarch64-apple-darwin", ext: "" }
    steps:
      - name: "📥 Repository: Checkout Code"
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: "🦕 Runtime: Setup Deno"
        uses: denoland/setup-deno@1b9de07eec64aed604b43ad3e30c9e7bd7dd8d84 # v1
        with:
          deno-version: v1.x

      - name: "🏷️ Version: Extract from Tag"
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: "🔍 Quality: Run Tests"
        run: deno test --allow-read --allow-write

      - name: "✨ Code Quality: Check Formatting"
        run: deno fmt --check

      - name: "🔨 Compile: ${{ matrix.target.name }} Binary"
        run: |
          deno compile \
            --allow-read \
            --allow-write \
            --allow-net \
            --target=${{ matrix.target.target }} \
            --output=./mikrus-${{ matrix.target.name }}${{ matrix.target.ext }} \
            src/cli.ts

      - name: "🔐 Security: Generate Checksums"
        run: |
          BINARY="mikrus-${{ matrix.target.name }}${{ matrix.target.ext }}"
          sha256sum "$BINARY" > "$BINARY.sha256"
          echo "Generated checksum for $BINARY:"
          cat "$BINARY.sha256"

      - name: "📦 Archive: Upload Binary Artifacts"
        uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 # v4
        with:
          name: mikrus-${{ matrix.target.name }}
          path: |
            mikrus-${{ matrix.target.name }}${{ matrix.target.ext }}
            mikrus-${{ matrix.target.name }}${{ matrix.target.ext }}.sha256
          retention-days: 90

  create-release:
    name: "🚀 GitHub: Create Release"
    runs-on: ubuntu-latest
    needs: [build-binaries]
    outputs:
      release_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - name: "📥 Repository: Checkout Code"
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
        with:
          fetch-depth: 0

      - name: "🏷️ Version: Extract from Tag"
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: "📝 Documentation: Generate Release Notes"
        id: release_notes
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          echo "## 🚀 Release $VERSION" > release_notes.md
          echo "" >> release_notes.md
          echo "### 📦 Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo "#### Binary Installation (Recommended)" >> release_notes.md
          echo '```bash' >> release_notes.md
          echo "# Linux" >> release_notes.md
          echo "curl -LO https://github.com/gander-tools/mikrus/releases/download/v$VERSION/mikrus-linux" >> release_notes.md
          echo "chmod +x mikrus-linux && sudo mv mikrus-linux /usr/local/bin/mikrus" >> release_notes.md
          echo "" >> release_notes.md
          echo "# Windows (PowerShell)" >> release_notes.md
          echo "Invoke-WebRequest -Uri https://github.com/gander-tools/mikrus/releases/download/v$VERSION/mikrus-windows.exe -OutFile mikrus.exe" >> release_notes.md
          echo "" >> release_notes.md
          echo "# macOS (x64)" >> release_notes.md
          echo "curl -LO https://github.com/gander-tools/mikrus/releases/download/v$VERSION/mikrus-macos-x64" >> release_notes.md
          echo "chmod +x mikrus-macos-x64 && sudo mv mikrus-macos-x64 /usr/local/bin/mikrus" >> release_notes.md
          echo '```' >> release_notes.md
          echo "" >> release_notes.md
          echo "#### Deno Installation" >> release_notes.md
          echo '```bash' >> release_notes.md
          echo "deno install --allow-read --allow-write --allow-net \\" >> release_notes.md
          echo "  --name mikrus https://deno.land/x/mikrus@v$VERSION/src/cli.ts" >> release_notes.md
          echo '```' >> release_notes.md
          echo "" >> release_notes.md
          echo "### 🔐 Binary Verification" >> release_notes.md
          echo "Each binary includes SHA256 checksum for integrity verification." >> release_notes.md
          echo "" >> release_notes.md
          echo "### 📋 Recent Changes" >> release_notes.md
          git log --pretty=format:"- %s" --no-merges --max-count=10 >> release_notes.md || echo "- Release $VERSION" >> release_notes.md

      - name: "📥 Artifacts: Download All Binaries"
        uses: actions/download-artifact@6b208ae046db98c579e8a3aa621ab581ff575935 # v4
        with:
          path: ./artifacts

      - name: "📦 Organize: Prepare Release Assets"
        run: |
          mkdir -p ./release-assets
          find ./artifacts -name "mikrus-*" -type f -exec cp {} ./release-assets/ \;
          ls -la ./release-assets/

      - name: "🚀 GitHub: Create Release"
        id: create_release
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # v1
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          name: Release ${{ steps.get_version.outputs.VERSION }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.VERSION, '-') }}
          files: ./release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-jsr:
    name: "📦 JSR: Publish Package"
    runs-on: ubuntu-latest
    needs: [create-release]
    if: ${{ !contains(needs.create-release.outputs.version, '-') }}  # Only for stable releases
    steps:
      - name: "📥 Repository: Checkout Code"
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: "🦕 Runtime: Setup Deno"
        uses: denoland/setup-deno@1b9de07eec64aed604b43ad3e30c9e7bd7dd8d84 # v1
        with:
          deno-version: v1.x

      - name: "🔍 Validation: Dry Run Publish"
        run: deno publish --dry-run

      - name: "🚀 JSR: Publish Package"
        run: deno publish
        env:
          DENO_REGISTRY_TOKEN: ${{ secrets.JSR_TOKEN }}

      - name: "✅ Verification: Confirm JSR Publication"
        run: |
          VERSION="${{ needs.create-release.outputs.version }}"
          echo "Waiting for JSR package propagation..."
          sleep 30
          
          # Verify package is available (when JSR API supports it)
          echo "Package published: https://jsr.io/@gander/mikrus@$VERSION"

  integration-test:
    name: "🧪 Integration: Test Released Binaries"
    runs-on: ${{ matrix.os }}
    needs: [create-release]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            binary: mikrus-linux
          - os: windows-latest
            binary: mikrus-windows.exe
          - os: macos-latest
            binary: mikrus-macos-x64
    steps:
      - name: "📥 Download: Binary from Release"
        run: |
          VERSION="${{ needs.create-release.outputs.version }}"
          DOWNLOAD_URL="https://github.com/gander-tools/mikrus/releases/download/v$VERSION/${{ matrix.binary }}"
          
          if [ "$RUNNER_OS" = "Windows" ]; then
            curl -LO "$DOWNLOAD_URL"
          else
            curl -LO "$DOWNLOAD_URL"
            chmod +x "${{ matrix.binary }}"
          fi

      - name: "🔍 Integration: Version Test"
        run: |
          if [ "$RUNNER_OS" = "Windows" ]; then
            VERSION_OUTPUT=$(./${{ matrix.binary }} --version)
          else
            VERSION_OUTPUT=$(./${{ matrix.binary }} --version)
          fi
          
          echo "Version output: $VERSION_OUTPUT"
          
          # Verify version format
          if [[ ! "$VERSION_OUTPUT" =~ mikrus\ [0-9]+\.[0-9]+\.[0-9]+ ]]; then
            echo "❌ Version output format incorrect: $VERSION_OUTPUT"
            exit 1
          fi
          
          echo "✅ Version test passed"

      - name: "🔍 Integration: Help Test"
        run: |
          if [ "$RUNNER_OS" = "Windows" ]; then
            HELP_OUTPUT=$(./${{ matrix.binary }} --help)
          else
            HELP_OUTPUT=$(./${{ matrix.binary }} --help)
          fi
          
          echo "Help output preview:"
          echo "$HELP_OUTPUT" | head -10
          
          if [[ ! "$HELP_OUTPUT" =~ "Command-line interface tool for managing VPS servers" ]]; then
            echo "❌ Help output missing expected description"
            exit 1
          fi
          
          echo "✅ Help test passed"