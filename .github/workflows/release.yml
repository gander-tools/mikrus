name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  packages: write

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Add node_modules/.bin to PATH
        run: echo "./node_modules/.bin" >> $GITHUB_PATH

      - name: Run tests
        run: bun run test

      - name: Run linting
        run: bunx @biomejs/biome ci

      - name: Build project
        run: bun run build

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF/refs\/tags\/v/}" >> $GITHUB_OUTPUT

      - name: Create Release Archive
        run: |
          mkdir -p release
          cp -r build/ bin/ package.json README.md release/
          [ -f LICENSE ] && cp LICENSE release/ || echo "LICENSE file not found, skipping"
          cd release
          tar -czf ../mikrus-${{ steps.get_version.outputs.VERSION }}.tar.gz .
          cd ..
          zip -r mikrus-${{ steps.get_version.outputs.VERSION }}.zip release/

      - name: Generate Release Notes
        id: release_notes
        run: |
          if [ -f CHANGELOG.md ]; then
            echo "Found CHANGELOG.md, extracting notes for version ${{ steps.get_version.outputs.VERSION }}"
            # Extract release notes from CHANGELOG.md if it exists
            awk '/^## \[?${{ steps.get_version.outputs.VERSION }}\]?/{flag=1; next} /^## /{flag=0} flag' CHANGELOG.md > release_notes.txt || echo "## What's Changed" > release_notes.txt
          else
            echo "## What's Changed" > release_notes.txt
            echo "Release ${{ steps.get_version.outputs.VERSION }}" >> release_notes.txt
            echo "" >> release_notes.txt
            echo "### Recent Commits" >> release_notes.txt
            git log --pretty=format:"- %s" --no-merges $(git describe --tags --abbrev=0 HEAD^)..HEAD >> release_notes.txt || git log --pretty=format:"- %s" --no-merges -10 >> release_notes.txt
          fi

      - name: Generate checksums
        run: |
          sha256sum mikrus-${{ steps.get_version.outputs.VERSION }}.tar.gz > mikrus-${{ steps.get_version.outputs.VERSION }}.tar.gz.sha256
          sha256sum mikrus-${{ steps.get_version.outputs.VERSION }}.zip > mikrus-${{ steps.get_version.outputs.VERSION }}.zip.sha256
          echo "Generated checksums:"
          cat mikrus-${{ steps.get_version.outputs.VERSION }}.tar.gz.sha256
          cat mikrus-${{ steps.get_version.outputs.VERSION }}.zip.sha256

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          body_path: release_notes.txt
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.VERSION, '-') }}
          files: |
            mikrus-${{ steps.get_version.outputs.VERSION }}.tar.gz
            mikrus-${{ steps.get_version.outputs.VERSION }}.zip
            mikrus-${{ steps.get_version.outputs.VERSION }}.tar.gz.sha256
            mikrus-${{ steps.get_version.outputs.VERSION }}.zip.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build and integration tests (required for publishing)
  build-and-test:
    name: Build and Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Add node_modules/.bin to PATH
        run: echo "./node_modules/.bin" >> $GITHUB_PATH

      - name: Run tests
        run: bun run test

      - name: Run linting
        run: bunx @biomejs/biome ci

      - name: Build project
        run: bun run build

      - name: Integration test - CLI help command
        run: |
          output=$(./bin/mikrus --compiled-build --help)
          echo "$output"
          if ! echo "$output" | grep -q "mikrus version"; then
            echo "ERROR: Help output does not contain expected version info"
            exit 1
          fi

      - name: Integration test - CLI version command
        run: |
          output=$(./bin/mikrus --compiled-build --version)
          echo "Version output: $output"
          if ! echo "$output" | grep -E "^[0-9]+\.[0-9]+\.[0-9]+"; then
            echo "ERROR: Version output does not match expected format (semver)"
            exit 1
          fi

  # NPM publication with provenance and signing
  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [build-and-release, build-and-test]
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-')
    permissions:
      contents: read
      id-token: write  # Required for npm provenance
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Add node_modules/.bin to PATH
        run: echo "./node_modules/.bin" >> $GITHUB_PATH

      - name: Build project
        run: bun run build

      - name: Verify package integrity
        run: |
          echo "Verifying package contents..."
          npm pack --dry-run
          echo "Package size check:"
          du -sh .

      - name: Publish to NPM with provenance
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Verify published package
        run: |
          echo "Waiting for package to propagate..."
          sleep 30
          npm view mikrus@${{ steps.get_version.outputs.VERSION || github.ref_name }} --json

