name: "‚ö° Node Automated Code Review (Claude)"

# Automated pull request reviews using Claude AI
# Triggers: ONLY PR opened/synchronized (automatic, no @claude needed)
# Purpose: Comprehensive automated code quality analysis and security review

on:
  pull_request:
    types: [opened, synchronize]
    # Optional: Only run on specific file changes
    # paths:
    #   - "src/**/*.ts"
    #   - "src/**/*.tsx"
    #   - "src/**/*.js"
    #   - "src/**/*.jsx"

jobs:
  node-automated-pr-review:
    name: "‚ö° Node Claude AI: Automated Pull Request Review"
    # Comprehensive automated review for code quality, security, and best practices
    # Optional: Filter by PR author
    # if: |
    #   github.event.pull_request.user.login == 'external-contributor' ||
    #   github.event.pull_request.user.login == 'new-developer' ||
    #   github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR'
    
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write # Minimal write access for comments only
      issues: read
      id-token: write
    
    steps:
      - name: "üì• Repository: Checkout PR Code"
        # Downloads PR changes for comprehensive code analysis
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
        with:
          fetch-depth: 1
          # Security: Prevent token exposure in URLs
          persist-credentials: false

      - name: "üß† Claude AI: Analyze Code Changes"
        # Performs automated code review using Claude AI with TypeScript CLI focus
        id: claude-review
        uses: anthropics/claude-code-action@a47fdbe49f641eadaf74042deb4cd9dfb8a981d5 # Pinned SHA for security
        timeout-minutes: 15 # Security: Prevent long-running executions
        env:
          # Security: Limit environment variable exposure
          NODE_ENV: production
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4.1)
          # model: "claude-opus-4-1-20250805"

          # MAXIMUM EFFECTIVENESS: Production-Grade Automated Review
          direct_prompt: |
            üîç COMPREHENSIVE PRODUCTION-GRADE CODE REVIEW
            You are a senior TypeScript/CLI security expert. Perform RIGOROUS analysis.
            
            üö® CRITICAL SECURITY AUDIT (FAIL ON ANY VIOLATION):
            ‚ùå Command injection vulnerabilities (process.exec, child_process)
            ‚ùå Path traversal attacks (../../, resolve() without validation)
            ‚ùå Unsafe user input processing (eval, Function constructor)
            ‚ùå Hardcoded secrets/credentials/API keys
            ‚ùå Insecure file permissions (777, world-writable)
            ‚ùå SQL injection patterns (if database operations)
            ‚ùå Prototype pollution vulnerabilities
            
            üîí CLI SECURITY CHECKLIST:
            ‚úÖ Input sanitization on ALL user arguments
            ‚úÖ File path validation (stay within project bounds)
            ‚úÖ Error messages don't leak sensitive info
            ‚úÖ Proper exit codes (0 success, 1+ errors)
            ‚úÖ Resource cleanup (streams, processes, temp files)
            
            üìã CODE QUALITY ENFORCEMENT (ZERO TOLERANCE):
            ‚ùå TypeScript `any` usage (must use proper types)
            ‚ùå Missing error handling (try/catch, .catch())
            ‚ùå Unused imports/variables/functions
            ‚ùå Console.log in production code
            ‚ùå Hardcoded values (use constants/config)
            ‚ùå Biome rule violations
            ‚ùå Missing JSDoc for public APIs
            
            üß™ TESTING REQUIREMENTS (MANDATORY):
            ‚úÖ Unit tests for ALL new functions
            ‚úÖ Integration tests for CLI commands
            ‚úÖ Edge case testing (empty inputs, invalid paths)
            ‚úÖ Error scenario testing
            ‚úÖ Mock external dependencies
            ‚úÖ Test coverage >80% for new code
            
            ‚ö° PERFORMANCE OPTIMIZATION:
            ‚ùå Synchronous file operations (use async)
            ‚ùå Memory leaks (unclosed streams/handlers)
            ‚ùå Inefficient loops (O(n¬≤) when O(n) possible)
            ‚ùå Large bundle size increases
            ‚ùå Blocking operations on main thread
            
            üèóÔ∏è ARCHITECTURE COMPLIANCE:
            ‚úÖ Follow Gluegun CLI conventions
            ‚úÖ Proper command structure in src/commands/
            ‚úÖ Consistent toolbox usage
            ‚úÖ Template usage for code generation
            ‚úÖ Extension patterns for new features
            
            üì¶ DEPENDENCY SECURITY:
            ‚ùå Known vulnerable package versions
            ‚ùå Unnecessary dependency additions
            ‚ùå Dev dependencies in production
            ‚ùå Packages without version pinning
            
            üéØ REVIEW OUTPUT FORMAT:
            Use this EXACT structure:
            
            ## üö® CRITICAL ISSUES (MUST FIX BEFORE MERGE)
            [List blocking security/quality issues]
            
            ## ‚ö†Ô∏è MAJOR ISSUES (FIX RECOMMENDED)  
            [List important improvements needed]
            
            ## üí° MINOR IMPROVEMENTS (OPTIONAL)
            [List nice-to-have optimizations]
            
            ## ‚úÖ POSITIVE OBSERVATIONS
            [Highlight good practices found]
            
            ## üìä REVIEW SUMMARY
            - Security Score: X/10
            - Quality Score: X/10  
            - Test Coverage: X%
            - Performance Impact: [LOW/MEDIUM/HIGH]
            - Recommendation: [APPROVE/CHANGES_NEEDED/REJECT]
            
            Be RUTHLESS but CONSTRUCTIVE. Include code examples and specific line references.

          # Optional: Use sticky comments to make Claude reuse the same comment on subsequent pushes to the same PR
          # use_sticky_comment: true
          
          # Optional: Customize review based on file types
          # direct_prompt: |
          #   Review this PR focusing on:
          #   - For TypeScript files: Type safety and proper interface usage
          #   - For API endpoints: Security, input validation, and error handling
          #   - For React components: Performance, accessibility, and best practices
          #   - For tests: Coverage, edge cases, and test quality
          
          # Optional: Different prompts for different authors
          # direct_prompt: |
          #   ${{ github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR' && 
          #   'Welcome! Please review this PR from a first-time contributor. Be encouraging and provide detailed explanations for any suggestions.' ||
          #   'Please provide a thorough code review focusing on our coding standards and best practices.' }}
          
          # Security: Restrict to read-only analysis and safe validation commands
          allowed_tools: "Bash(bun run test),Bash(bun run check),Bash(bun run lint)"
          
          # Optional: Skip review for certain conditions
          # if: |
          #   !contains(github.event.pull_request.title, '[skip-review]') &&
          #   !contains(github.event.pull_request.title, '[WIP]')

