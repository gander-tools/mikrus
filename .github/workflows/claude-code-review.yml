name: Claude Code Review

on:
  pull_request:
    branches: [master]
    types: [opened, synchronize, reopened]

jobs:
  claude-review:
    if: github.event.pull_request.user.login == 'gander'

    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: read

    steps:
      - name: Checkout repository
        id: deno_claude_checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 1

      - name: Run Claude Code Review
        id: deno_claude_review
        uses: anthropics/claude-code-action@a6888c03f22170d00d2a92fa2317584ca7d5e108 # v1.0
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.CLAUDE_CODE_REVIEW_PAT }}

          prompt: |
            Review the following aspects:
            
            ## Code Quality & Architecture
            - Overall project structure and organization
            - Design patterns and architectural decisions
            - Code consistency and adherence to TypeScript/Deno best practices
            - Proper use of Cliffy framework patterns
            - Error handling and edge cases coverage
            
            ## Security
            - Input validation and sanitization
            - Path traversal and injection vulnerabilities
            - Proper permission usage (--allow-read, --allow-write, --allow-net)
            - Sensitive data handling
            - Dependency security (check for known vulnerable packages)
            
            ## Performance
            - Potential performance bottlenecks
            - Efficient use of async/await patterns
            - Memory usage considerations
            - Binary compilation optimization opportunities
            
            ## Maintainability
            - Code readability and clarity
            - Documentation quality (comments, JSDoc, README)
            - Test coverage adequacy (review test files, don't run them)
            - Technical debt and refactoring opportunities
            
            ## GitHub Workflows
            - Review all workflows in .github/workflows/ for correctness
            - Check for workflow best practices and efficiency
            - Validate workflow syntax and job dependencies
            - Security of workflow permissions and secrets usage
            
            ## Suggestions for Improvement
            - Prioritized list of improvements (critical, high, medium, low)
            - Specific code examples where applicable
            - Recommendations for next development steps
            
            Focus on providing actionable feedback that improves code quality, security, and maintainability.

          use_sticky_comment: true
