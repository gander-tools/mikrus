name: Claude Code Review

on:
  # Trigger after merges to master branch
  push:
    branches: [master]
  # Manual trigger for specific PRs
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull Request number to review'
        required: false
        type: string
        default: ''

jobs:
  claude-review:
    # Optional: Filter by PR author
    # if: |
    #   github.event.pull_request.user.login == 'external-contributor' ||
    #   github.event.pull_request.user.login == 'new-developer' ||
    #   github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR'

    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: read
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    steps:
      - name: Get PR Context
        id: pr_context
        run: |
          if [ -n "${{ github.event.inputs.pr_number }}" ]; then
            echo "PR_NUMBER=${{ github.event.inputs.pr_number }}" >> $GITHUB_OUTPUT
            echo "Reviewing PR #${{ github.event.inputs.pr_number }}"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
            echo "Reviewing PR #${{ github.event.pull_request.number }}"
          elif [ "${{ github.event_name }}" = "push" ]; then
            # For push events, find the most recent merged PR
            echo "Push to master detected - finding most recent merged PR..."
            RECENT_PR=$(gh pr list --state merged --limit 1 --json number --jq '.[0].number')
            if [ -n "$RECENT_PR" ]; then
              echo "PR_NUMBER=$RECENT_PR" >> $GITHUB_OUTPUT
              echo "Reviewing recently merged PR #$RECENT_PR"
            else
              echo "No recent merged PRs found. Skipping review."
              exit 0
            fi
          else
            echo "No PR context available. Skipping review."
            exit 0
          fi

      - name: Checkout repository
        id: deno_claude_checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 1

      - name: Run Claude Code Review
        id: deno_claude_review
        uses: anthropics/claude-code-action@a6888c03f22170d00d2a92fa2317584ca7d5e108 # v1.0
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.CLAUDE_CODE_REVIEW_PAT }}
          pr_number: ${{ steps.pr_context.outputs.PR_NUMBER }}

          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4.1)
          # model: "claude-opus-4-1-20250805"

          # Direct prompt for automated review (no @claude mention needed)
          prompt: |
            Please review this pull request and provide feedback on:
            - Code quality and best practices
            - Potential bugs or issues
            - Performance considerations
            - Security concerns
            - Test coverage
            
            Be constructive and helpful in your feedback.

          # Optional: Use sticky comments to make Claude reuse the same comment on subsequent pushes to the same PR
          use_sticky_comment: true

          # Optional: Customize review based on file types
          # direct_prompt: |
          #   Review this PR focusing on:
          #   - For TypeScript files: Type safety and proper interface usage
          #   - For API endpoints: Security, input validation, and error handling
          #   - For React components: Performance, accessibility, and best practices
          #   - For tests: Coverage, edge cases, and test quality

          # Optional: Different prompts for different authors
          # direct_prompt: |
          #   ${{ github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR' &&
          #   'Welcome! Please review this PR from a first-time contributor. Be encouraging and provide detailed explanations for any suggestions.' ||
          #   'Please provide a thorough code review focusing on our coding standards and best practices.' }}

          # Optional: Add specific tools for running tests or linting
          # allowed_tools: "Bash(npm run test),Bash(npm run lint),Bash(npm run typecheck)"

          # Optional: Skip review for certain conditions
          # if: |
          #   !contains(github.event.pull_request.title, '[skip-review]') &&
          #   !contains(github.event.pull_request.title, '[WIP]')

# ORGANIZATION SECRETS:
# Uses organization-level secrets for Claude Code integration:
# - CLAUDE_CODE_OAUTH_TOKEN: OAuth token for Claude Code API access
# - ANTHROPIC_API_KEY: Anthropic API key for Claude model access
# Both secrets are configured at the organization level for security

