name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-format:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run Biome checks
        run: bunx @biomejs/biome ci

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20, 22]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Add node_modules/.bin to PATH
        run: echo "./node_modules/.bin" >> $GITHUB_PATH

      - name: Run tests
        run: bun run test:coverage

      - name: Upload coverage reports to Codecov
        if: matrix.node-version == 20
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/clover.xml
          fail_ci_if_error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Add node_modules/.bin to PATH
        run: echo "./node_modules/.bin" >> $GITHUB_PATH

      - name: Build project
        run: bun run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            build/
            bin/
          retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Run security audit
        run: |
          echo "Running security audit..."
          audit_output=$(bunx bun audit 2>&1 || true)
          echo "$audit_output"
          
          # Check for high or critical vulnerabilities
          if echo "$audit_output" | grep -E "(critical|high)" -i; then
            echo "ERROR: Critical or high severity vulnerabilities found!"
            echo "Please review and fix security issues before proceeding."
            exit 1
          fi
          
          echo "✅ No critical or high severity vulnerabilities found."

      # - name: Run dependency vulnerability check
      #   uses: securecodewarrior/github-action-add-sarif@v1
      #   if: false # Disable until SARIF report is available
      #   with:
      #     sarif-file: 'security-report.sarif'

  # Integration test job that runs the built CLI
  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Add node_modules/.bin to PATH
        run: echo "./node_modules/.bin" >> $GITHUB_PATH

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Make CLI executable
        run: chmod +x bin/mikrus

      - name: Test CLI help command (compiled version)
        run: |
          output=$(./bin/mikrus --compiled-build --help)
          echo "$output"
          if ! echo "$output" | grep -q "mikrus version"; then
            echo "ERROR: Help output does not contain expected version info"
            exit 1
          fi
          if ! echo "$output" | grep -q "generate (g)"; then
            echo "ERROR: Help output does not contain expected commands"
            exit 1
          fi

      - name: Test CLI version command (compiled version)
        run: |
          output=$(./bin/mikrus --compiled-build --version)
          echo "Version output: $output"
          if ! echo "$output" | grep -E "^[0-9]+\.[0-9]+\.[0-9]+"; then
            echo "ERROR: Version output does not match expected format (semver)"
            exit 1
          fi


  # Notification job that runs regardless of other job outcomes
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, build, security-scan, integration-test]
    if: always()
    steps:
      - name: Notify on success
        if: needs.lint-and-format.result == 'success' && needs.test.result == 'success' && needs.build.result == 'success'
        run: |
          echo "✅ All CI checks passed successfully!"

      - name: Notify on failure
        if: needs.lint-and-format.result == 'failure' || needs.test.result == 'failure' || needs.build.result == 'failure'
        run: |
          echo "❌ CI pipeline failed. Check the logs for details."
          # Note: Not exiting with failure to allow notification completion
