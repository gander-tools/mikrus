name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  lint-and-format:
    name: Lint & Format
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@f4d14e03ff726c06358e5557344e1da148b56cf7 # v1
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Add node_modules/.bin to PATH
        run: echo "./node_modules/.bin" >> $GITHUB_PATH

      - name: Run Biome checks
        run: bunx @biomejs/biome ci

      - name: Validate pre-commit hooks
        run: |
          if [ -f ".lefthook.yml" ] || [ -f "lefthook.yml" ]; then
            echo "✅ Lefthook configuration found"
            bunx lefthook install
            bunx lefthook run pre-commit --all-files || echo "⚠️ Pre-commit hooks failed"
          else
            echo "ℹ️ No pre-commit hooks configured"
          fi

      - name: Cache build outputs
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: |
            build/
            node_modules/.cache/
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

  test:
    name: Test (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        node-version: [20, 22]
        include:
          # Primary testing with coverage
          - node-version: 20
            coverage: true
          - node-version: 22
            coverage: false
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@f4d14e03ff726c06358e5557344e1da148b56cf7 # v1
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Add node_modules/.bin to PATH
        run: echo "./node_modules/.bin" >> $GITHUB_PATH

      - name: Run tests
        run: bun run test:coverage

      - name: Upload coverage reports to Codecov
        if: matrix.coverage == true
        uses: codecov/codecov-action@ab904c41d6ece82784817410c45d8b8c02684457 # v3
        with:
          file: ./coverage/clover.xml
          fail_ci_if_error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: [lint-and-format, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@f4d14e03ff726c06358e5557344e1da148b56cf7 # v1
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Add node_modules/.bin to PATH
        run: echo "./node_modules/.bin" >> $GITHUB_PATH

      - name: Build project
        run: bun run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: build-artifacts
          path: |
            build/
            bin/
          retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@f4d14e03ff726c06358e5557344e1da148b56cf7 # v1
        with:
          bun-version: latest

      - name: Run security audit
        run: |
          echo "Running security audit..."
          audit_output=$(bunx bun audit 2>&1 || true)
          echo "$audit_output"
          
          # Check for high or critical vulnerabilities
          if echo "$audit_output" | grep -E "(critical|high)" -i; then
            echo "ERROR: Critical or high severity vulnerabilities found!"
            echo "Please review and fix security issues before proceeding."
            exit 1
          fi
          
          echo "✅ No critical or high severity vulnerabilities found."

      # - name: Run dependency vulnerability check
      #   uses: securecodewarrior/github-action-add-sarif@v1
      #   if: false # Disable until SARIF report is available
      #   with:
      #     sarif-file: 'security-report.sarif'

  # Integration test job that runs the built CLI
  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: 20

      - name: Setup Bun
        uses: oven-sh/setup-bun@f4d14e03ff726c06358e5557344e1da148b56cf7 # v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Add node_modules/.bin to PATH
        run: echo "./node_modules/.bin" >> $GITHUB_PATH

      - name: Download build artifacts
        uses: actions/download-artifact@eaceaf801fd36c7dee90939fad912460b18a1ffe # v4
        with:
          name: build-artifacts

      - name: Make CLI executable
        run: chmod +x bin/mikrus

      - name: Test CLI help command (compiled version)
        run: |
          output=$(./bin/mikrus --compiled-build --help)
          echo "$output"
          if ! echo "$output" | grep -q "mikrus version"; then
            echo "ERROR: Help output does not contain expected version info"
            exit 1
          fi
          if ! echo "$output" | grep -q "generate (g)"; then
            echo "ERROR: Help output does not contain expected commands"
            exit 1
          fi

      - name: Test CLI version command (compiled version)
        run: |
          output=$(./bin/mikrus --compiled-build --version)
          echo "Version output: $output"
          if ! echo "$output" | grep -E "^[0-9]+\.[0-9]+\.[0-9]+"; then
            echo "ERROR: Version output does not match expected format (semver)"
            exit 1
          fi


  # Notification job that runs regardless of other job outcomes
  notify:
    name: Notify
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: [lint-and-format, test, build, security-scan, integration-test]
    if: always()
    steps:
      - name: Notify on success
        if: needs.lint-and-format.result == 'success' && needs.test.result == 'success' && needs.build.result == 'success'
        run: |
          echo "✅ All CI checks passed successfully!"

      - name: Notify on failure
        if: needs.lint-and-format.result == 'failure' || needs.test.result == 'failure' || needs.build.result == 'failure'
        run: |
          echo "❌ CI pipeline failed. Check the logs for details."
          # Note: Not exiting with failure to allow notification completion
