name: "‚ö° CI/CD Pipeline"

# Main continuous integration workflow for code quality and testing
# Triggers: Push/PR to main+develop branches + manual dispatch
# Jobs: lint-and-format ‚Üí test ‚Üí build ‚Üí [security-audits] ‚Üí integration-test ‚Üí notify

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  node-lint-and-format:
    name: "‚ö° Code Quality: Lint & Format"
    # Runs Biome checks, validates pre-commit hooks (lefthook), caches build outputs
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: "üì• Repository: Checkout Code"
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: "‚ö° Runtime: Setup Bun Environment"
        uses: oven-sh/setup-bun@735343b667d3e6f658f44d0eca948eb6282f2b76 # v2
        with:
          bun-version: latest

      - name: "üíæ Cache: Restore Dependencies"
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: "üì¶ Dependencies: Install Frozen Lockfile"
        # Installs exact dependencies from lockfile for reproducible builds
        run: bun install --frozen-lockfile

      - name: "üõ£Ô∏è Environment: Add CLI Tools to PATH"
        # Makes node_modules/.bin tools available for subsequent steps
        run: echo "./node_modules/.bin" >> $GITHUB_PATH

      - name: "‚ú® Code Quality: Biome Lint & Format Check"
        # Validates code style, formatting, and linting rules using Biome
        run: bunx @biomejs/biome ci

      - name: "‚úÖ Validation: Pre-commit Hooks Check"
        run: |
          if [ -f ".lefthook.yml" ] || [ -f "lefthook.yml" ]; then
            echo "‚úÖ Lefthook configuration found"
            bunx lefthook install
            bunx lefthook run pre-commit --all-files || echo "‚ö†Ô∏è Pre-commit hooks failed"
          else
            echo "‚ÑπÔ∏è No pre-commit hooks configured"
          fi

      - name: "üßπ Cleanup: Verify Lefthook Uninstall"
        run: |
          if [ -f ".lefthook.yml" ] || [ -f "lefthook.yml" ]; then
            echo "üßπ Testing lefthook uninstall functionality..."
            bunx lefthook uninstall || echo "‚ö†Ô∏è Lefthook uninstall failed"
            echo "‚úÖ Lefthook uninstall verification completed"
          else
            echo "‚ÑπÔ∏è No lefthook configuration to uninstall"
          fi

      - name: "üíæ Cache: Build Outputs Storage"
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: |
            build/
            node_modules/.cache/
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

  node-test:
    name: "‚ö° Test Suite: Node ${{ matrix.node-version }}"
    # Runs Vitest tests across Node.js 20+22, generates coverage for Node 20
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        node-version: [20, 22]
        include:
          # Primary testing with coverage
          - node-version: 20
            coverage: true
          - node-version: 22
            coverage: false
    steps:
      - name: "üì• Repository: Checkout Code"
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: "üü¢ Runtime: Setup Node.js ${{ matrix.node-version }}"
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: "‚ö° Runtime: Setup Bun Environment"
        uses: oven-sh/setup-bun@735343b667d3e6f658f44d0eca948eb6282f2b76 # v2
        with:
          bun-version: latest

      - name: "üíæ Cache: Restore Dependencies"
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: "üì¶ Dependencies: Install Frozen Lockfile"
        run: bun install --frozen-lockfile

      - name: "üõ£Ô∏è Environment: Add CLI Tools to PATH"
        run: echo "./node_modules/.bin" >> $GITHUB_PATH

      - name: "üß™ Quality: Execute Test Suite"
        run: bun run test:coverage

      - name: "üìä Quality: Upload Coverage to Codecov"
        if: matrix.coverage == true
        uses: codecov/codecov-action@ab904c41d6ece82784817410c45d8b8c02684457 # v3
        with:
          file: ./coverage/clover.xml
          fail_ci_if_error: false

  node-build:
    name: "‚ö° Build: TypeScript Compilation"
    # Compiles TypeScript, creates build artifacts, uploads for integration testing
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: [node-lint-and-format, node-test]
    steps:
      - name: "üì• Repository: Checkout Code"
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: "‚ö° Runtime: Setup Bun Environment"
        uses: oven-sh/setup-bun@735343b667d3e6f658f44d0eca948eb6282f2b76 # v2
        with:
          bun-version: latest

      - name: "üíæ Cache: Restore Dependencies"
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: "üì¶ Dependencies: Install Frozen Lockfile"
        run: bun install --frozen-lockfile

      - name: "üõ£Ô∏è Environment: Add CLI Tools to PATH"
        run: echo "./node_modules/.bin" >> $GITHUB_PATH

      - name: "üî® Build: Compile Production Binary"
        run: bun run build

      - name: "üì§ Artifacts: Upload Build Results"
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: build-artifacts
          path: |
            build/
            bin/
          retention-days: 7

  node-security-audit:
    name: "‚ö° Security: Comprehensive Audit"
    # Calls dedicated security workflow for comprehensive vulnerability and compliance scanning
    uses: ./.github/workflows/comprehensive-security-audit.yml
    needs: [node-build]
    permissions:
      contents: read
      security-events: write
      actions: read
    secrets:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}


  node-integration-test:
    name: "‚ö° Integration: CLI End-to-End Tests"
    # Downloads build artifacts, tests compiled CLI binary (help, version commands)
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: [node-build]
    steps:
      - name: "üì• Repository: Checkout Code"
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: "üü¢ Runtime: Setup Node.js"
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: 20

      - name: "‚ö° Runtime: Setup Bun Environment"
        uses: oven-sh/setup-bun@735343b667d3e6f658f44d0eca948eb6282f2b76 # v2
        with:
          bun-version: latest

      - name: "üì¶ Dependencies: Install Frozen Lockfile"
        run: bun install --frozen-lockfile

      - name: "üõ£Ô∏è Environment: Add CLI Tools to PATH"
        run: echo "./node_modules/.bin" >> $GITHUB_PATH

      - name: "üì• Artifacts: Download Build Results"
        uses: actions/download-artifact@87c55149d96e628cc2ef7e6fc2aab372015aec85 # v4.1.3
        with:
          name: build-artifacts

      - name: "‚öôÔ∏è Setup: Make CLI Binary Executable"
        run: chmod +x bin/mikrus

      - name: "üîç Integration: CLI Help Command Test"
        run: |
          output=$(./bin/mikrus --compiled-build --help)
          echo "$output"
          if ! echo "$output" | grep -q "mikrus version"; then
            echo "ERROR: Help output does not contain expected version info"
            exit 1
          fi
          if ! echo "$output" | grep -q "generate (g)"; then
            echo "ERROR: Help output does not contain expected commands"
            exit 1
          fi

      - name: "üìã Integration: CLI Version Command Test"
        run: |
          output=$(./bin/mikrus --compiled-build --version)
          echo "Version output: $output"
          if ! echo "$output" | grep -E "^[0-9]+\.[0-9]+\.[0-9]+"; then
            echo "ERROR: Version output does not match expected format (semver)"
            exit 1
          fi


  node-notify:
    name: "‚ö° Results: Pipeline Status Notification"
    # Runs after all jobs complete (success/failure), provides final status summary
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: [node-lint-and-format, node-test, node-build, node-security-audit, node-integration-test]
    if: always()
    steps:
      - name: "‚úÖ Notification: Success Status Report"
        if: needs.node-lint-and-format.result == 'success' && needs.node-test.result == 'success' && needs.node-build.result == 'success'
        run: |
          echo "‚úÖ All CI checks passed successfully!"

      - name: "‚ùå Notification: Failure Status Report"
        if: needs.node-lint-and-format.result == 'failure' || needs.node-test.result == 'failure' || needs.node-build.result == 'failure'
        run: |
          echo "‚ùå CI pipeline failed. Check the logs for details."
          # Note: Not exiting with failure to allow notification completion
