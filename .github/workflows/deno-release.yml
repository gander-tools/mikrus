name: "📦 GitHub Packages Distribution"

# Binary distribution to GitHub Packages
# Builds and publishes binaries for Linux x86_64
# Direct package upload without Docker containers

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+' # Semantic versions only
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 1.0.0)'
        required: true
        default: '0.0.1'
        type: string

concurrency:
  group: packages-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  packages: write

env:
  DENO_VERSION: '2.4'
  PACKAGE_NAME: mikrus-cli

jobs:
  # Phase 0: Stability Check
  stability-check:
    name: "🔍 Stability Validation"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    outputs:
      is_stable: ${{ steps.stability_validation.outputs.is_stable }}
      version: ${{ steps.stability_validation.outputs.version }}
      
    steps:
      - name: "🏷️ Extract Version"
        id: extract_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: "🔍 Validate Stability Rules"
        id: stability_validation
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.extract_version.outputs.VERSION }}"
          echo "🔍 Validating stability for version: $VERSION"
          
          # Check version format
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format: $VERSION (must be semantic: x.y.z)"
            echo "is_stable=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Parse version components
          MAJOR=$(echo "$VERSION" | cut -d. -f1)
          MINOR=$(echo "$VERSION" | cut -d. -f2)
          PATCH=$(echo "$VERSION" | cut -d. -f3)
          
          echo "📊 Version components: $MAJOR.$MINOR.$PATCH"
          
          if [[ "$MAJOR" == "0" ]]; then
            # Development phase checks
            VERSION_NUM=$(echo "$VERSION" | awk -F. '{printf "%d%02d%02d\n", $1, $2, $3}')
            MILESTONE_NUM=100  # 0.1.0
            
            if [[ "$VERSION_NUM" -lt "$MILESTONE_NUM" ]]; then
              echo "🔍 Development phase - checking for active fix PRs..."
              
              ACTIVE_FIX_PRS=$(gh pr list \
                --repo "${{ github.repository }}" \
                --state open \
                --json number,title,labels \
                --jq '.[] | select(
                  (.title | test("^(fix|bugfix|hotfix)"; "i")) or
                  (.labels[]?.name | test("(fix|bug|hotfix)"; "i"))
                ) | .number' | wc -l)
              
              if [[ "$ACTIVE_FIX_PRS" -gt 0 ]]; then
                echo "❌ Found $ACTIVE_FIX_PRS active fix PR(s)"
                echo "is_stable=false" >> $GITHUB_OUTPUT
                exit 1
              else
                echo "✅ No active fix PRs"
                echo "is_stable=true" >> $GITHUB_OUTPUT
              fi
            else
              echo "✅ Pre-production milestone"
              echo "is_stable=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "✅ Production version"
            echo "is_stable=true" >> $GITHUB_OUTPUT
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  # Phase 1: Build Binaries
  build-binaries:
    name: "🔨 Build ${{ matrix.platform.name }}"
    runs-on: ${{ matrix.platform.os }}
    needs: stability-check
    if: needs.stability-check.outputs.is_stable == 'true'
    permissions:
      contents: read
    
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: "Linux x86_64"
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            output: mikrus-linux-x64
            artifact: linux-x64

    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "🦕 Setup Deno"
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ env.DENO_VERSION }}

      - name: "🏷️ Extract Version"
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: "📦 Cache Dependencies"
        run: |
          echo "Caching Deno dependencies..."
          deno cache src/cli.ts

      - name: "🔨 Compile Binary"
        run: |
          echo "Compiling ${{ matrix.platform.name }} binary..."
          
          # Create dist directory
          mkdir -p ./dist
          
          # Compile with Deno
          deno compile \
            --allow-read \
            --allow-write \
            --allow-net \
            --target=${{ matrix.platform.target }} \
            --output=./dist/${{ matrix.platform.output }} \
            src/cli.ts
          
          echo "Binary compiled successfully"

      - name: "🧪 Test Binary"
        if: runner.os == 'Linux'
        run: |
          echo "Testing compiled binary..."
          chmod +x ./dist/${{ matrix.platform.output }}
          
          # Basic functionality tests
          ./dist/${{ matrix.platform.output }} --version
          ./dist/${{ matrix.platform.output }} --help
          
          echo "Binary tests passed"

      - name: "📏 Binary Analysis"
        id: analysis
        run: |
          echo "Analyzing binary..."
          
          # Get file size
          SIZE=$(stat -c%s "./dist/${{ matrix.platform.output }}" 2>/dev/null || stat -f%z "./dist/${{ matrix.platform.output }}" 2>/dev/null || echo "0")
          SIZE_MB=$((SIZE / 1024 / 1024))
          
          echo "BINARY_SIZE_MB=$SIZE_MB" >> $GITHUB_OUTPUT
          echo "Binary size: ${SIZE_MB}MB"

      - name: "📤 Upload Artifact"
        uses: actions/upload-artifact@v4
        with:
          name: mikrus-${{ matrix.platform.artifact }}-${{ steps.version.outputs.VERSION }}
          path: ./dist/${{ matrix.platform.output }}
          retention-days: 7
          compression-level: 9

  # Phase 2: Publish to GitHub Packages
  publish-packages:
    name: "🚀 Publish to GitHub Packages"
    runs-on: ubuntu-latest
    needs: [stability-check, build-binaries]
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: "🏷️ Setup Version"
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Publishing version: $VERSION"

      - name: "📥 Download Artifacts"
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: "📦 Prepare Packages"
        id: prepare
        run: |
          echo "Preparing packages for upload..."
          
          # Create package directory structure
          mkdir -p ./packages
          
          # Find and organize all binaries
          find ./artifacts -type f -name "mikrus-*" | while read -r file; do
            filename=$(basename "$file")
            cp "$file" "./packages/$filename"
            
            # Make executable
            chmod +x "./packages/$filename"
            
            echo "Prepared: $filename"
          done
          
          # List packages
          echo "Package contents:"
          ls -la ./packages/
          
          # Calculate total size
          TOTAL_SIZE=$(du -sm ./packages | cut -f1)
          echo "PACKAGE_SIZE_MB=$TOTAL_SIZE" >> $GITHUB_OUTPUT
          echo "Total package size: ${TOTAL_SIZE}MB"

      - name: "📤 Publish Linux x64 Binary"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Publishing Linux x64 binary to GitHub Packages..."
          
          OWNER="${{ github.repository_owner }}"
          REPO="${{ github.event.repository.name }}"
          VERSION="${{ steps.version.outputs.VERSION }}"
          
          # Find Linux binary
          LINUX_BINARY=$(find ./packages -name "*linux-x64*" -type f | head -1)
          
          if [[ -n "$LINUX_BINARY" ]]; then
            BINARY_NAME=$(basename "$LINUX_BINARY")
            
            echo "Uploading: $BINARY_NAME"
            
            # Upload to GitHub Packages using API
            # Generic packages endpoint for binaries
            curl -X PUT \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/octet-stream" \
              --data-binary "@$LINUX_BINARY" \
              "https://uploads.github.com/repos/$OWNER/$REPO/releases/assets?name=$BINARY_NAME&label=Linux+x64+Binary" \
              2>/dev/null || {
                # Alternative: Upload as package
                echo "Attempting alternative upload method..."
                
                # Create tar.gz for package registry
                tar -czf "./mikrus-cli-${VERSION}-linux-x64.tar.gz" -C ./packages "$BINARY_NAME"
                
                # Upload to package registry
                curl -X PUT \
                  -H "Authorization: Bearer $GITHUB_TOKEN" \
                  -H "Content-Type: application/gzip" \
                  --data-binary "@./mikrus-cli-${VERSION}-linux-x64.tar.gz" \
                  "https://npm.pkg.github.com/@$OWNER/${{ env.PACKAGE_NAME }}/-/${{ env.PACKAGE_NAME }}-${VERSION}-linux-x64.tgz" \
                  || echo "Note: Package upload requires npm registry configuration"
              }
            
            echo "✅ Linux x64 binary published"
          else
            echo "⚠️ Linux binary not found"
            exit 1
          fi

      - name: "🧹 Cleanup Old Packages"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
        run: |
          echo "Cleaning up old package versions..."
          
          # List and clean old package versions via API
          OWNER="${{ github.repository_owner }}"
          PACKAGE_TYPE="npm"  # or "container" depending on your setup
          PACKAGE_NAME="${{ env.PACKAGE_NAME }}"
          
          # Get package versions
          VERSIONS=$(curl -s \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/orgs/$OWNER/packages/$PACKAGE_TYPE/$PACKAGE_NAME/versions" \
            | jq -r '.[].id' 2>/dev/null || echo "")
          
          if [[ -n "$VERSIONS" ]]; then
            # Keep only the latest 3 versions
            echo "$VERSIONS" | tail -n +4 | while read -r version_id; do
              echo "Deleting old version: $version_id"
              curl -X DELETE \
                -H "Authorization: Bearer $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/orgs/$OWNER/packages/$PACKAGE_TYPE/$PACKAGE_NAME/versions/$version_id" \
                2>/dev/null || echo "Could not delete version $version_id"
            done
          fi

      - name: "📊 Publishing Summary"
        run: |
          echo "## 🚀 Package Publishing Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Package Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Name**: ${{ env.PACKAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.version.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Size**: ${{ steps.prepare.outputs.PACKAGE_SIZE_MB }}MB" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Installation" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Download from GitHub Packages" >> $GITHUB_STEP_SUMMARY
          echo "gh release download v${{ steps.version.outputs.VERSION }} --repo ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Status" >> $GITHUB_STEP_SUMMARY
          echo "Binary packages successfully published to GitHub Packages" >> $GITHUB_STEP_SUMMARY
