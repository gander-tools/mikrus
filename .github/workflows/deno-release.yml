name: "üì¶ Deno Package Release"

# Builds Linux x86_64 + Windows x86_64 binaries and creates draft GitHub Release
# Does NOT publish release - remains as draft
# Does NOT create tags - only responds to existing tags

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+' # Semantic versions only
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag version (e.g., v1.0.0)'
        required: true
        type: string

concurrency:
  group: release-${{ github.ref }}-${{ github.event.inputs.tag || '' }}
  cancel-in-progress: false

permissions:
  contents: write
  pull-requests: read

env:
  DENO_VERSION: '2.4'

jobs:
  # Phase 1: Stability Check
  stability-check:
    name: "üîç Stability Validation"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    outputs:
      is_stable: ${{ steps.stability_validation.outputs.is_stable }}
      version: ${{ steps.stability_validation.outputs.version }}
      tag: ${{ steps.stability_validation.outputs.tag }}
      
    steps:
      - name: "üè∑Ô∏è Extract Version"
        id: extract_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG="${{ github.event.inputs.tag }}"
            VERSION="${TAG#v}"
          else
            TAG="${GITHUB_REF#refs/tags/}"
            VERSION="${TAG#v}"
          fi
          
          echo "TAG=$TAG" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "üìå Processing tag: $TAG (version: $VERSION)"

      - name: "üîé Validate Stability Rules"
        id: stability_validation
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.extract_version.outputs.VERSION }}"
          TAG="${{ steps.extract_version.outputs.TAG }}"
          
          echo "üîç Validating stability for version: $VERSION"
          
          # Check version format
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Invalid version format: $VERSION (must be semantic: x.y.z)"
            echo "is_stable=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Parse version components
          MAJOR=$(echo "$VERSION" | cut -d. -f1)
          MINOR=$(echo "$VERSION" | cut -d. -f2)
          PATCH=$(echo "$VERSION" | cut -d. -f3)
          
          echo "üìä Version components: $MAJOR.$MINOR.$PATCH"
          
          if [[ "$MAJOR" == "0" ]]; then
            # Development phase checks
            VERSION_NUM=$(echo "$VERSION" | awk -F. '{printf "%d%02d%02d\n", $1, $2, $3}')
            MILESTONE_NUM=100  # 0.1.0
            
            if [[ "$VERSION_NUM" -lt "$MILESTONE_NUM" ]]; then
              echo "üîç Development phase (before v0.1.0) - checking for active fix PRs..."
              
              ACTIVE_FIX_PRS=$(gh pr list \
                --repo "${{ github.repository }}" \
                --state open \
                --json number,title,labels \
                --jq '.[] | select(
                  (.title | test("^(fix|bugfix|hotfix)"; "i")) or
                  (.labels[]?.name | test("(fix|bug|hotfix)"; "i"))
                ) | .number' | wc -l)
              
              echo "üìä Active fix PRs found: $ACTIVE_FIX_PRS"
              
              if [[ "$ACTIVE_FIX_PRS" -gt 0 ]]; then
                echo "‚ùå STABILITY CHECK FAILED"
                echo "   Development phase requires no active fix PRs"
                echo "   Found $ACTIVE_FIX_PRS active fix PR(s)"
                
                # List problematic PRs
                echo "üîç Active fix PRs:"
                gh pr list \
                  --repo "${{ github.repository }}" \
                  --state open \
                  --json number,title \
                  --jq '.[] | select(.title | test("^(fix|bugfix|hotfix)"; "i")) | "  #\(.number): \(.title)"'
                
                echo "is_stable=false" >> $GITHUB_OUTPUT
                exit 1
              else
                echo "‚úÖ STABILITY CHECK PASSED - No active fix PRs"
                echo "is_stable=true" >> $GITHUB_OUTPUT
              fi
            else
              echo "üöÄ Pre-production milestone (v0.1.0+)"
              echo "is_stable=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "üéâ Production version (v1.0.0+)"
            echo "is_stable=true" >> $GITHUB_OUTPUT
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT

  # Phase 2: Build Matrix - Multi-platform binaries
  build-binaries:
    name: "üî® Build ${{ matrix.platform.name }}"
    runs-on: ${{ matrix.platform.os }}
    needs: stability-check
    if: needs.stability-check.outputs.is_stable == 'true'
    permissions:
      contents: read
    
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: "Linux x86_64"
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            output: mikrus-linux-x64
            artifact: linux-x64
          - name: "Windows x86_64"
            os: windows-latest
            target: x86_64-pc-windows-msvc
            output: mikrus-windows-x64.exe
            artifact: windows-x64
          - name: "macOS x86_64"
            os: macos-latest
            target: x86_64-apple-darwin
            output: mikrus-macos-x64
            artifact: macos-x64
    
    outputs:
      binary_size_linux: ${{ steps.analysis-unix.outputs.BINARY_SIZE_MB }}
      binary_size_windows: ${{ steps.analysis-windows.outputs.BINARY_SIZE_MB }}
    
    steps:
      - name: "üì• Checkout Repository"
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
        with:
          fetch-depth: 0

      - name: "ü¶ï Setup Deno"
        uses: denoland/setup-deno@61e7bbad6d2a9c6d9c69b6c2ca0ee4a44a7ccd2b # v2.0.0
        with:
          deno-version: ${{ env.DENO_VERSION }}
          cache-hash: ${{ hashFiles('**/deno.json', '**/deno.lock') }}

      - name: "üì¶ Cache Dependencies"
        run: |
          echo "üì¶ Caching Deno dependencies..."
          deno cache src/cli.ts

      - name: "üî® Compile ${{ matrix.platform.name }} Binary"
        run: |
          echo "üî® Compiling ${{ matrix.platform.name }} binary..."

          VERSION="${{ needs.stability-check.outputs.version }}"
          GIT_HASH="${GITHUB_SHA::7}"
          
          echo "‚úÖ Binary compiled successfully for ${{ matrix.platform.name }}"
        shell: bash

      - name: "üîÑ Replace Version Placeholders (Windows)"
        if: runner.os == 'Windows'
        run: |
          $VERSION = "${{ needs.stability-check.outputs.version }}"
          $GIT_HASH = "${{ github.sha }}".Substring(0,7)
          
          Write-Host "Replacing version placeholders on Windows..."
          
          # Replace version placeholders using PowerShell
          (Get-Content ./src/version.ts) -replace '%VERSION%', $VERSION | Set-Content ./src/version.ts
          (Get-Content ./src/version.ts) -replace '%GIT_HASH%', $GIT_HASH | Set-Content ./src/version.ts
          
          Write-Host "Version placeholders replaced (Windows)"
        shell: powershell

      - name: "üîÑ Replace Version Placeholders (Unix)"
        if: runner.os != 'Windows'
        run: |
          VERSION="${{ needs.stability-check.outputs.version }}"
          GIT_HASH="${{ github.sha }}"
          GIT_HASH="${GIT_HASH::7}"
          
          echo "Replacing version placeholders on Unix..."
          
          # Replace version placeholders using sed (macOS compatible)
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            sed -i '' "s/%VERSION%/$VERSION/g" ./src/version.ts
            sed -i '' "s/%GIT_HASH%/$GIT_HASH/g" ./src/version.ts
          else
            sed -i "s/%VERSION%/$VERSION/g" ./src/version.ts
            sed -i "s/%GIT_HASH%/$GIT_HASH/g" ./src/version.ts
          fi
          
          echo "Version placeholders replaced (Unix)"
        shell: bash

      - name: "üìÅ Create Distribution Directory"
        run: |
          echo "üìÅ Creating distribution directory..."
          mkdir -p ./dist
          echo "‚úÖ Distribution directory created"
        shell: bash

      - name: "‚ö° Compile Binary"
        run: |
          echo "‚ö° Compiling binary for ${{ matrix.platform.name }}..."
          
          # Compile with Deno for target platform
          deno compile \
            --allow-read \
            --allow-write \
            --allow-net \
            --target=${{ matrix.platform.target }} \
            --output=./dist/${{ matrix.platform.output }} \
            src/cli.ts
          
          echo "‚úÖ Binary compiled successfully for ${{ matrix.platform.name }}"
        shell: bash

      - name: "üîß Make Binary Executable (Unix)"
        if: runner.os != 'Windows'
        run: |
          echo "üîß Making binary executable on Unix..."
          chmod +x ./dist/${{ matrix.platform.output }}
          echo "‚úÖ Binary made executable"
        shell: bash

      - name: "üß™ Test Binary Functionality"
        run: |
          echo "üß™ Testing compiled binary functionality..."
          
          # Test basic functionality
          ./dist/${{ matrix.platform.output }} --version
          ./dist/${{ matrix.platform.output }} --help
          
          echo "‚úÖ Binary tests passed for ${{ matrix.platform.name }}"
        shell: bash

      - name: "üìä Binary Analysis (Windows)"
        if: runner.os == 'Windows'
        id: analysis-windows
        run: |
          Write-Host "Analyzing binary on Windows..."
          
          # Get file size using PowerShell
          $filePath = "./dist/${{ matrix.platform.output }}"
          $fileInfo = Get-Item $filePath
          $SIZE = $fileInfo.Length
          $SIZE_MB = [math]::Floor($SIZE / 1024 / 1024)
          
          # Set GitHub output
          echo "BINARY_SIZE_MB=$SIZE_MB" >> $env:GITHUB_OUTPUT
          Write-Host "Binary size: ${SIZE_MB}MB"
          
          # Create SHA256 checksum
          Write-Host "Creating checksum..."
          certutil -hashfile $filePath SHA256 > "$filePath.sha256"
          
          Write-Host "Binary analysis completed for Windows"
        shell: powershell

      - name: "üìä Binary Analysis (Unix)"
        if: runner.os != 'Windows'
        id: analysis-unix
        run: |
          echo "üìä Analyzing binary on Unix..."
          
          # Get file size using stat
          SIZE=$(stat -c%s "./dist/${{ matrix.platform.output }}" 2>/dev/null || stat -f%z "./dist/${{ matrix.platform.output }}" 2>/dev/null || echo "0")
          SIZE_MB=$((SIZE / 1024 / 1024))
          
          echo "BINARY_SIZE_MB=$SIZE_MB" >> $GITHUB_OUTPUT
          echo "üì¶ Binary size: ${SIZE_MB}MB"
          
          # Create SHA256 checksum
          echo "Creating checksum..."
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            shasum -a 256 "./dist/${{ matrix.platform.output }}" > "./dist/${{ matrix.platform.output }}.sha256"
          else
            sha256sum "./dist/${{ matrix.platform.output }}" > "./dist/${{ matrix.platform.output }}.sha256"
          fi
          
          echo "Binary analysis completed for Unix"
        shell: bash

      - name: "üì§ Upload Binary Artifact"
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: ${{ matrix.platform.artifact }}
          path: |
            ./dist/${{ matrix.platform.output }}
            ./dist/${{ matrix.platform.output }}.sha256
          retention-days: 7
          compression-level: 9

      - name: "üìä Build Summary (Windows)"
        if: runner.os == 'Windows'
        run: |
          echo "## Build ${{ matrix.platform.name }} Complete" >> $env:GITHUB_STEP_SUMMARY
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "- **Target**: ${{ matrix.platform.target }}" >> $env:GITHUB_STEP_SUMMARY
          echo "- **Binary**: ${{ matrix.platform.output }}" >> $env:GITHUB_STEP_SUMMARY
          echo "- **Size**: ${{ steps.analysis-windows.outputs.BINARY_SIZE_MB }}MB" >> $env:GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.stability-check.outputs.tag }}" >> $env:GITHUB_STEP_SUMMARY
          echo "- **Status**: Success" >> $env:GITHUB_STEP_SUMMARY
        shell: powershell

      - name: "üìä Build Summary (Unix)"
        if: runner.os != 'Windows'
        run: |
          echo "## üî® ${{ matrix.platform.name }} Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Target**: ${{ matrix.platform.target }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Binary**: ${{ matrix.platform.output }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Size**: ${{ steps.analysis-unix.outputs.BINARY_SIZE_MB }}MB" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.stability-check.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ‚úÖ Success" >> $GITHUB_STEP_SUMMARY
        shell: bash

  # Phase 3: Create Draft Release
  create-draft-release:
    name: "üìù Create Draft Release"
    runs-on: ubuntu-latest
    needs: [stability-check, build-binaries]
    permissions:
      contents: write
    
    steps:
      - name: "üì• Checkout Repository"
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
        with:
          fetch-depth: 0

      - name: "üì• Download All Binaries"
        uses: actions/download-artifact@87c55149d96e628cc2ef7e6fc2aab372015aec85 # v4.1.3
        with:
          path: ./release-assets

      - name: "üìù Generate Release Notes"
        id: release_notes
        env:
          VERSION: ${{ needs.stability-check.outputs.version }}
          TAG: ${{ needs.stability-check.outputs.tag }}
        run: |
          # Get binary sizes
          LINUX_SIZE=$(find ./release-assets -name "mikrus-linux-x64" -exec stat -c%s {} \; | awk '{print int($1/1024/1024)"MB"}' 2>/dev/null || echo "~MB")
          WINDOWS_SIZE=$(find ./release-assets -name "mikrus-windows-x64.exe" -exec stat -c%s {} \; | awk '{print int($1/1024/1024)"MB"}' 2>/dev/null || echo "~MB")
          MACOS_SIZE=$(find ./release-assets -name "mikrus-macos-x64" -exec stat -c%s {} \; | awk '{print int($1/1024/1024)"MB"}' 2>/dev/null || echo "~MB")
          
          cat > release_notes.md << EOF
          ## üöÄ mikrus CLI ${{ env.TAG }}
          
          ### üì¶ Assets
          
          | Platform | Architecture | Size | File |
          |----------|-------------|------|------|
          | Linux | x86_64 | ${LINUX_SIZE} | \`mikrus-linux-x64\` |
          | Windows | x86_64 | ${WINDOWS_SIZE} | \`mikrus-windows-x64.exe\` |
          | macOS | x86_64 | ${MACOS_SIZE} | \`mikrus-macos-x64\` |
          
          ### üîß Installation
          
          #### Linux x86_64
          \`\`\`bash
          # Download binary
          wget https://github.com/${{ github.repository }}/releases/download/${{ env.TAG }}/mikrus-linux-x64
          
          # Make executable
          chmod +x mikrus-linux-x64
          
          # Move to PATH (optional)
          sudo mv mikrus-linux-x64 /usr/local/bin/mikrus
          
          # Verify installation
          mikrus --version
          \`\`\`
          
          #### Windows x86_64
          \`\`\`powershell
          # Download binary (PowerShell)
          Invoke-WebRequest -Uri "https://github.com/${{ github.repository }}/releases/download/${{ env.TAG }}/mikrus-windows-x64.exe" -OutFile "mikrus.exe"
          
          # Or using curl (if available)
          curl -L -o mikrus.exe "https://github.com/${{ github.repository }}/releases/download/${{ env.TAG }}/mikrus-windows-x64.exe"
          
          # Verify installation
          .\mikrus.exe --version
          \`\`\`
          
          #### macOS x86_64
          \`\`\`bash
          # Download binary
          curl -L -o mikrus-macos-x64 "https://github.com/${{ github.repository }}/releases/download/${{ env.TAG }}/mikrus-macos-x64"
          
          # Make executable
          chmod +x mikrus-macos-x64
          
          # Move to PATH (optional)
          sudo mv mikrus-macos-x64 /usr/local/bin/mikrus
          
          # Verify installation
          mikrus --version
          \`\`\`
          
          ### üîê Verify Integrity
          
          #### Linux
          \`\`\`bash
          # Download checksum file
          wget https://github.com/${{ github.repository }}/releases/download/${{ env.TAG }}/mikrus-linux-x64.sha256
          
          # Verify checksum
          sha256sum -c mikrus-linux-x64.sha256
          \`\`\`
          
          #### Windows
          \`\`\`powershell
          # Download checksum file
          Invoke-WebRequest -Uri "https://github.com/${{ github.repository }}/releases/download/${{ env.TAG }}/mikrus-windows-x64.exe.sha256" -OutFile "mikrus-windows-x64.exe.sha256"
          
          # Verify checksum (PowerShell)
          \$hash = Get-FileHash -Path "mikrus.exe" -Algorithm SHA256
          \$expected = Get-Content "mikrus-windows-x64.exe.sha256"
          if (\$hash.Hash -eq \$expected.Split()[0]) { Write-Host "Checksum verified" } else { Write-Host "Checksum mismatch" }
          \`\`\`
          
          #### macOS
          \`\`\`bash
          # Download checksum file
          curl -L -o mikrus-macos-x64.sha256 "https://github.com/${{ github.repository }}/releases/download/${{ env.TAG }}/mikrus-macos-x64.sha256"
          
          # Verify checksum
          shasum -a 256 -c mikrus-macos-x64.sha256
          \`\`\`
          
          ### üìù Changelog
          
          <!-- Changelog will be auto-generated from commits -->
          
          ### üîß Usage
          
          ```bash
          # Show help
          mikrus --help
          
          # Generate model files
          mikrus generate <name>
          
          # Check version
          mikrus --version
          ```
          
          ### üìã Requirements
          
          **Linux x86_64:**
          - Linux x86_64 (64-bit)
          - No external dependencies (Deno runtime embedded)
          
          **Windows x86_64:**
          - Windows 10/11 x86_64 (64-bit)
          - No external dependencies (Deno runtime embedded)
          
          **macOS x86_64:**
          - macOS 10.15+ x86_64 (64-bit)
          - No external dependencies (Deno runtime embedded)
          
          ### üìö Documentation
          
          - [README](https://github.com/${{ github.repository }}#readme)
          - [Issues & Support](https://github.com/${{ github.repository }}/issues)
          
          ---
          
          **‚ö†Ô∏è Note:** This is a draft release. Review and publish when ready.
          EOF
          
          echo "‚úÖ Release notes generated"

      - name: "üè∑Ô∏è Create Draft Release"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ needs.stability-check.outputs.tag }}
        run: |
          echo "üìù Creating draft release for $TAG..."
          
          # Check if release already exists
          EXISTING_RELEASE=$(gh release view "$TAG" --json id 2>/dev/null || echo "")
          
          if [[ -n "$EXISTING_RELEASE" ]]; then
            echo "‚ö†Ô∏è  Release $TAG already exists. Deleting old draft..."
            gh release delete "$TAG" --yes --cleanup-tag 2>/dev/null || true
          fi
          
          # Create new draft release with all assets
          gh release create "$TAG" \
            --draft \
            --title "mikrus CLI $TAG" \
            --notes-file release_notes.md \
            ./release-assets/linux-x64/mikrus-linux-x64 \
            ./release-assets/linux-x64/mikrus-linux-x64.sha256 \
            ./release-assets/windows-x64/mikrus-windows-x64.exe \
            ./release-assets/windows-x64/mikrus-windows-x64.exe.sha256 \
            ./release-assets/macos-x64/mikrus-macos-x64 \
            ./release-assets/macos-x64/mikrus-macos-x64.sha256
          
          echo "‚úÖ Draft release created successfully"
          echo "üìå Release URL: https://github.com/${{ github.repository }}/releases/tag/$TAG"

      - name: "üìä Release Summary"
        env:
          TAG: ${{ needs.stability-check.outputs.tag }}
        run: |
          echo "## üìù Draft Release Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìå Release Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: $TAG" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: Draft (not published)" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms**: Linux x86_64 + Windows x86_64 + macOS x86_64" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Included Assets" >> $GITHUB_STEP_SUMMARY
          echo "**Linux x86_64:**" >> $GITHUB_STEP_SUMMARY
          echo "- mikrus-linux-x64 (Linux binary)" >> $GITHUB_STEP_SUMMARY
          echo "- mikrus-linux-x64.sha256 (SHA256 checksum)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Windows x86_64:**" >> $GITHUB_STEP_SUMMARY
          echo "- mikrus-windows-x64.exe (Windows binary)" >> $GITHUB_STEP_SUMMARY
          echo "- mikrus-windows-x64.exe.sha256 (SHA256 checksum)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**macOS x86_64:**" >> $GITHUB_STEP_SUMMARY
          echo "- mikrus-macos-x64 (macOS binary)" >> $GITHUB_STEP_SUMMARY
          echo "- mikrus-macos-x64.sha256 (SHA256 checksum)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚ö†Ô∏è Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the draft release at [GitHub Releases](https://github.com/${{ github.repository }}/releases)" >> $GITHUB_STEP_SUMMARY
          echo "2. Edit release notes if needed" >> $GITHUB_STEP_SUMMARY
          echo "3. Publish when ready" >> $GITHUB_STEP_SUMMARY
