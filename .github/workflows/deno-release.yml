name: "📦 Deno Package Release"

# Builds Linux x86_64 binary and creates draft GitHub Release
# Does NOT publish release - remains as draft
# Does NOT create tags - only responds to existing tags

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+' # Semantic versions only
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag version (e.g., v1.0.0)'
        required: true
        type: string

concurrency:
  group: release-${{ github.ref }}-${{ github.event.inputs.tag || '' }}
  cancel-in-progress: false

permissions:
  contents: write
  pull-requests: read

env:
  DENO_VERSION: '2.4'

jobs:
  # Phase 1: Stability Check
  stability-check:
    name: "🔍 Stability Validation"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    outputs:
      is_stable: ${{ steps.stability_validation.outputs.is_stable }}
      version: ${{ steps.stability_validation.outputs.version }}
      tag: ${{ steps.stability_validation.outputs.tag }}
      
    steps:
      - name: "🏷️ Extract Version"
        id: extract_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG="${{ github.event.inputs.tag }}"
            VERSION="${TAG#v}"
          else
            TAG="${GITHUB_REF#refs/tags/}"
            VERSION="${TAG#v}"
          fi
          
          echo "TAG=$TAG" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "📌 Processing tag: $TAG (version: $VERSION)"

      - name: "🔎 Validate Stability Rules"
        id: stability_validation
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.extract_version.outputs.VERSION }}"
          TAG="${{ steps.extract_version.outputs.TAG }}"
          
          echo "🔍 Validating stability for version: $VERSION"
          
          # Check version format
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format: $VERSION (must be semantic: x.y.z)"
            echo "is_stable=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Parse version components
          MAJOR=$(echo "$VERSION" | cut -d. -f1)
          MINOR=$(echo "$VERSION" | cut -d. -f2)
          PATCH=$(echo "$VERSION" | cut -d. -f3)
          
          echo "📊 Version components: $MAJOR.$MINOR.$PATCH"
          
          if [[ "$MAJOR" == "0" ]]; then
            # Development phase checks
            VERSION_NUM=$(echo "$VERSION" | awk -F. '{printf "%d%02d%02d\n", $1, $2, $3}')
            MILESTONE_NUM=100  # 0.1.0
            
            if [[ "$VERSION_NUM" -lt "$MILESTONE_NUM" ]]; then
              echo "🔍 Development phase (before v0.1.0) - checking for active fix PRs..."
              
              ACTIVE_FIX_PRS=$(gh pr list \
                --repo "${{ github.repository }}" \
                --state open \
                --json number,title,labels \
                --jq '.[] | select(
                  (.title | test("^(fix|bugfix|hotfix)"; "i")) or
                  (.labels[]?.name | test("(fix|bug|hotfix)"; "i"))
                ) | .number' | wc -l)
              
              echo "📊 Active fix PRs found: $ACTIVE_FIX_PRS"
              
              if [[ "$ACTIVE_FIX_PRS" -gt 0 ]]; then
                echo "❌ STABILITY CHECK FAILED"
                echo "   Development phase requires no active fix PRs"
                echo "   Found $ACTIVE_FIX_PRS active fix PR(s)"
                
                # List problematic PRs
                echo "🔍 Active fix PRs:"
                gh pr list \
                  --repo "${{ github.repository }}" \
                  --state open \
                  --json number,title \
                  --jq '.[] | select(.title | test("^(fix|bugfix|hotfix)"; "i")) | "  #\(.number): \(.title)"'
                
                echo "is_stable=false" >> $GITHUB_OUTPUT
                exit 1
              else
                echo "✅ STABILITY CHECK PASSED - No active fix PRs"
                echo "is_stable=true" >> $GITHUB_OUTPUT
              fi
            else
              echo "🚀 Pre-production milestone (v0.1.0+)"
              echo "is_stable=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "🎉 Production version (v1.0.0+)"
            echo "is_stable=true" >> $GITHUB_OUTPUT
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT

  # Phase 2: Build Linux Binary
  build-linux:
    name: "🔨 Build Linux x86_64"
    runs-on: ubuntu-latest
    needs: stability-check
    if: needs.stability-check.outputs.is_stable == 'true'
    permissions:
      contents: read
    outputs:
      binary_size: ${{ steps.analysis.outputs.BINARY_SIZE_MB }}
    
    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "🦕 Setup Deno"
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ env.DENO_VERSION }}
          cache-hash: ${{ hashFiles('**/deno.json', '**/deno.lock') }}

      - name: "📦 Cache Dependencies"
        run: |
          echo "📦 Caching Deno dependencies..."
          deno cache src/cli.ts

      - name: "🔨 Compile Linux Binary"
        run: |
          echo "🔨 Compiling Linux x86_64 binary..."

          VERSION="${{ needs.stability-check.outputs.version }}"
          GIT_HASH="${{ github.sha }}"
          
          sed -i "s/%VERSION%/$VERSION/g" ./src/version.ts
          sed -i "s/%GIT_HASH%/$GIT_HASH/g" ./src/version.ts

          # Create dist directory
          mkdir -p ./dist
          
          # Compile with Deno
          deno compile \
            --allow-read \
            --allow-write \
            --allow-net \
            --target=x86_64-unknown-linux-gnu \
            --output=./dist/mikrus-linux-x64 \
            src/cli.ts
          
          echo "✅ Binary compiled successfully"

      - name: "🧪 Test Binary"
        run: |
          echo "🧪 Testing compiled binary..."
          chmod +x ./dist/mikrus-linux-x64
          
          # Basic functionality tests
          ./dist/mikrus-linux-x64 --version
          ./dist/mikrus-linux-x64 --help
          
          echo "✅ Binary tests passed"

      - name: "📊 Binary Analysis"
        id: analysis
        run: |
          echo "📊 Analyzing binary..."
          
          # Get file size
          SIZE=$(stat -c%s "./dist/mikrus-linux-x64")
          SIZE_MB=$((SIZE / 1024 / 1024))
          
          echo "BINARY_SIZE_MB=$SIZE_MB" >> $GITHUB_OUTPUT
          echo "📦 Binary size: ${SIZE_MB}MB"
          
          # Create checksum
          sha256sum ./dist/mikrus-linux-x64 > ./dist/mikrus-linux-x64.sha256
          
          echo "🔒 Checksum created"

      - name: "📤 Upload Binary Artifact"
        uses: actions/upload-artifact@v4
        with:
          name: mikrus-linux-x64
          path: |
            ./dist/mikrus-linux-x64
            ./dist/mikrus-linux-x64.sha256
          retention-days: 7
          compression-level: 9

      - name: "📊 Build Summary"
        run: |
          echo "## 🔨 Linux x86_64 Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Target**: x86_64-unknown-linux-gnu" >> $GITHUB_STEP_SUMMARY
          echo "- **Binary**: mikrus-linux-x64" >> $GITHUB_STEP_SUMMARY
          echo "- **Size**: ${{ steps.analysis.outputs.BINARY_SIZE_MB }}MB" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.stability-check.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY

  # Phase 3: Create Draft Release
  create-draft-release:
    name: "📝 Create Draft Release"
    runs-on: ubuntu-latest
    needs: [stability-check, build-linux]
    permissions:
      contents: write
    
    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "📥 Download Binary"
        uses: actions/download-artifact@v4
        with:
          name: mikrus-linux-x64
          path: ./release-assets

      - name: "📝 Generate Release Notes"
        id: release_notes
        env:
          VERSION: ${{ needs.stability-check.outputs.version }}
          TAG: ${{ needs.stability-check.outputs.tag }}
          BINARY_SIZE: ${{ needs.build-linux.outputs.binary_size }}
        run: |
          cat > release_notes.md << 'EOF'
          ## 🚀 mikrus CLI ${{ env.TAG }}
          
          ### 📦 Assets
          
          | Platform | Architecture | Size | File |
          |----------|-------------|------|------|
          | Linux | x86_64 | ${{ env.BINARY_SIZE }}MB | `mikrus-linux-x64` |
          
          ### 🔧 Installation
          
          #### Linux x86_64
          ```bash
          # Download binary
          wget https://github.com/${{ github.repository }}/releases/download/${{ env.TAG }}/mikrus-linux-x64
          
          # Make executable
          chmod +x mikrus-linux-x64
          
          # Move to PATH (optional)
          sudo mv mikrus-linux-x64 /usr/local/bin/mikrus
          
          # Verify installation
          mikrus --version
          ```
          
          ### 🔐 Verify Integrity
          
          ```bash
          # Download checksum file
          wget https://github.com/${{ github.repository }}/releases/download/${{ env.TAG }}/mikrus-linux-x64.sha256
          
          # Verify checksum
          sha256sum -c mikrus-linux-x64.sha256
          ```
          
          ### 📝 Changelog
          
          <!-- Changelog will be auto-generated from commits -->
          
          ### 🔧 Usage
          
          ```bash
          # Show help
          mikrus --help
          
          # Generate model files
          mikrus generate <name>
          
          # Check version
          mikrus --version
          ```
          
          ### 📋 Requirements
          
          - Linux x86_64
          - No external dependencies (Deno runtime embedded)
          
          ### 📚 Documentation
          
          - [README](https://github.com/${{ github.repository }}#readme)
          - [Issues & Support](https://github.com/${{ github.repository }}/issues)
          
          ---
          
          **⚠️ Note:** This is a draft release. Review and publish when ready.
          EOF
          
          echo "✅ Release notes generated"

      - name: "🏷️ Create Draft Release"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ needs.stability-check.outputs.tag }}
        run: |
          echo "📝 Creating draft release for $TAG..."
          
          # Check if release already exists
          EXISTING_RELEASE=$(gh release view "$TAG" --json id 2>/dev/null || echo "")
          
          if [[ -n "$EXISTING_RELEASE" ]]; then
            echo "⚠️  Release $TAG already exists. Deleting old draft..."
            gh release delete "$TAG" --yes --cleanup-tag 2>/dev/null || true
          fi
          
          # Create new draft release
          gh release create "$TAG" \
            --draft \
            --title "mikrus CLI $TAG" \
            --notes-file release_notes.md \
            ./release-assets/mikrus-linux-x64 \
            ./release-assets/mikrus-linux-x64.sha256
          
          echo "✅ Draft release created successfully"
          echo "📌 Release URL: https://github.com/${{ github.repository }}/releases/tag/$TAG"

      - name: "📊 Release Summary"
        env:
          TAG: ${{ needs.stability-check.outputs.tag }}
        run: |
          echo "## 📝 Draft Release Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📌 Release Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: $TAG" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: Draft (not published)" >> $GITHUB_STEP_SUMMARY
          echo "- **Binary Size**: ${{ needs.build-linux.outputs.binary_size }}MB" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Included Assets" >> $GITHUB_STEP_SUMMARY
          echo "- mikrus-linux-x64 (Linux x86_64 binary)" >> $GITHUB_STEP_SUMMARY
          echo "- mikrus-linux-x64.sha256 (SHA256 checksum)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⚠️ Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the draft release at [GitHub Releases](https://github.com/${{ github.repository }}/releases)" >> $GITHUB_STEP_SUMMARY
          echo "2. Edit release notes if needed" >> $GITHUB_STEP_SUMMARY
          echo "3. Publish when ready" >> $GITHUB_STEP_SUMMARY
