name: Publish Package

on:
  workflow_dispatch:
    inputs:
      registry:
        description: 'Target registry'
        required: true
        default: 'npm'
        type: choice
        options:
        - npm
        - github
        - both
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
        - prerelease
      dry_run:
        description: 'Dry run (test without publishing)'
        required: false
        type: boolean
        default: true

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  pre-publish-checks:
    name: Pre-publish Checks
    runs-on: ubuntu-latest
    outputs:
      current_version: ${{ steps.version.outputs.current_version }}
      new_version: ${{ steps.version.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Add node_modules/.bin to PATH
        run: echo "./node_modules/.bin" >> $GITHUB_PATH

      - name: Get current version
        id: version
        run: |
          current_version=$(node -p "require('./package.json').version")
          echo "current_version=$current_version" >> $GITHUB_OUTPUT
          echo "Current version: $current_version"

      - name: Run comprehensive tests
        run: |
          echo "🧪 Running comprehensive test suite..."
          bun run test:coverage

      - name: Run security audit
        run: |
          echo "🔒 Running security audit..."
          audit_output=$(bunx bun audit 2>&1 || true)
          if echo "$audit_output" | grep -E "(critical|high)" -i; then
            echo "❌ Security vulnerabilities found!"
            echo "Please fix security issues before publishing."
            exit 1
          fi
          echo "✅ No critical or high severity vulnerabilities found."

      - name: Run quality checks
        run: |
          echo "✨ Running code quality checks..."
          bunx @biomejs/biome ci

      - name: Build verification
        run: |
          echo "🏗️ Verifying build process..."
          bun run build
          
          # Verify build outputs exist
          if [ ! -d "build" ]; then
            echo "❌ Build directory not found!"
            exit 1
          fi
          
          if [ ! -f "bin/mikrus" ]; then
            echo "❌ CLI binary not found!"
            exit 1
          fi
          
          echo "✅ Build verification completed"

      - name: Package verification
        run: |
          echo "📦 Verifying package configuration..."
          
          # Check package.json fields
          name=$(node -p "require('./package.json').name || 'MISSING'")
          version=$(node -p "require('./package.json').version || 'MISSING'")
          description=$(node -p "require('./package.json').description || 'MISSING'")
          license=$(node -p "require('./package.json').license || 'MISSING'")
          
          echo "Package name: $name"
          echo "Version: $version"  
          echo "Description: $description"
          echo "License: $license"
          
          if [ "$name" = "MISSING" ] || [ "$version" = "MISSING" ]; then
            echo "❌ Package name or version missing!"
            exit 1
          fi
          
          # Verify files field exists and build directory is included
          if ! node -e "const pkg = require('./package.json'); if (!pkg.files || !pkg.files.includes('build')) throw new Error('build not in files')"; then
            echo "❌ 'build' directory not included in package files!"
            exit 1
          fi
          
          echo "✅ Package verification completed"

      - name: CLI functionality test
        run: |
          echo "🔧 Testing CLI functionality..."
          chmod +x bin/mikrus
          
          # Test basic commands
          ./bin/mikrus --help || echo "Help command failed"
          ./bin/mikrus --version || echo "Version command failed"
          
          echo "✅ CLI functionality test completed"

  version-bump:
    name: Version Bump
    runs-on: ubuntu-latest
    needs: pre-publish-checks
    if: ${{ !github.event.inputs.dry_run }}
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
      tag_name: ${{ steps.bump.outputs.tag_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Bump version
        id: bump
        run: |
          echo "🔢 Bumping version (${{ github.event.inputs.version_bump }})..."
          
          # Set package to public temporarily for version bump
          sed -i 's/"private": true/"private": false/' package.json
          
          new_version=$(npm version ${{ github.event.inputs.version_bump }} --no-git-tag-version)
          new_version=${new_version#v}  # Remove 'v' prefix if present
          
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          echo "tag_name=v$new_version" >> $GITHUB_OUTPUT
          echo "New version: $new_version"

      - name: Commit version bump
        run: |
          git add package.json
          git commit -m "chore: bump version to ${{ steps.bump.outputs.new_version }}"
          git tag ${{ steps.bump.outputs.tag_name }}
          git push origin main
          git push origin ${{ steps.bump.outputs.tag_name }}

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [pre-publish-checks, version-bump]
    if: (github.event.inputs.registry == 'npm' || github.event.inputs.registry == 'both') && !github.event.inputs.dry_run
    environment: npm-publishing
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main  # Get the version bump commit

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Add node_modules/.bin to PATH
        run: echo "./node_modules/.bin" >> $GITHUB_PATH

      - name: Build for publishing
        run: |
          echo "🏗️ Building for NPM publication..."
          bun run build

      - name: Prepare package for publication
        run: |
          echo "📦 Preparing package for NPM..."
          
          # Set package to public
          sed -i 's/"private": true/"private": false/' package.json
          
          # Verify package contents
          npm pack --dry-run

      - name: Publish to NPM with provenance
        run: |
          echo "🚀 Publishing to NPM..."
          npm publish --access public --provenance
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Verify NPM publication
        run: |
          echo "✅ Verifying NPM publication..."
          package_name=$(node -p "require('./package.json').name")
          version=$(node -p "require('./package.json').version")
          
          # Wait a bit for NPM to update
          sleep 10
          
          # Check if package is available
          if npm view "$package_name@$version" version; then
            echo "✅ Package successfully published to NPM!"
          else
            echo "❌ Package verification failed"
            exit 1
          fi

  publish-github:
    name: Publish to GitHub Packages
    runs-on: ubuntu-latest
    needs: [pre-publish-checks, version-bump]
    if: (github.event.inputs.registry == 'github' || github.event.inputs.registry == 'both') && !github.event.inputs.dry_run
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://npm.pkg.github.com'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Add node_modules/.bin to PATH
        run: echo "./node_modules/.bin" >> $GITHUB_PATH

      - name: Build for publishing
        run: bun run build

      - name: Prepare for GitHub Packages
        run: |
          echo "📦 Preparing for GitHub Packages..."
          
          # Set package to public and update name for GitHub Packages
          sed -i 's/"private": true/"private": false/' package.json
          
          # Update package name to include scope for GitHub Packages if not already scoped
          current_name=$(node -p "require('./package.json').name")
          if [[ "$current_name" != @* ]]; then
            sed -i "s/\"name\": \"$current_name\"/\"name\": \"@${{ github.repository_owner }}\/$current_name\"/" package.json
          fi

      - name: Publish to GitHub Packages
        run: |
          echo "🚀 Publishing to GitHub Packages..."
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  dry-run:
    name: Dry Run Publication
    runs-on: ubuntu-latest
    needs: pre-publish-checks
    if: github.event.inputs.dry_run == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build project
        run: bun run build

      - name: Dry run package preparation
        run: |
          echo "🧪 Running dry run publication test..."
          
          # Set package to public temporarily
          cp package.json package.json.backup
          sed -i 's/"private": true/"private": false/' package.json
          
          # Test package creation
          echo "📦 Testing package creation..."
          npm pack --dry-run
          
          # Show what would be published
          echo "📋 Files that would be published:"
          npm pack --dry-run | grep -E "^(package/|npm notice)"
          
          # Restore original package.json
          mv package.json.backup package.json
          
          echo "✅ Dry run completed successfully!"
          echo "Use 'dry_run: false' to perform actual publication."

  notification:
    name: Publication Notification
    runs-on: ubuntu-latest
    needs: [pre-publish-checks, version-bump, publish-npm, publish-github, dry-run]
    if: always()
    steps:
      - name: Publication summary
        run: |
          echo "📢 Publication Summary"
          echo "===================="
          echo "Registry: ${{ github.event.inputs.registry }}"
          echo "Version bump: ${{ github.event.inputs.version_bump }}"
          echo "Dry run: ${{ github.event.inputs.dry_run }}"
          echo ""
          echo "Results:"
          echo "Pre-checks: ${{ needs.pre-publish-checks.result }}"
          echo "Version bump: ${{ needs.version-bump.result || 'skipped' }}"
          echo "NPM publish: ${{ needs.publish-npm.result || 'skipped' }}"
          echo "GitHub publish: ${{ needs.publish-github.result || 'skipped' }}"
          echo "Dry run: ${{ needs.dry-run.result || 'skipped' }}"
          
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "✅ Dry run completed - ready for actual publication!"
          elif [ "${{ needs.publish-npm.result }}" = "success" ] || [ "${{ needs.publish-github.result }}" = "success" ]; then
            echo "✅ Package published successfully!"
            if [ "${{ needs.version-bump.outputs.new_version }}" != "" ]; then
              echo "New version: ${{ needs.version-bump.outputs.new_version }}"
            fi
          else
            echo "❌ Publication failed or was skipped"
          fi