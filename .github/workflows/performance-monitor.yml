name: Pipeline Performance Monitor

on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: performance-monitor
  cancel-in-progress: false

jobs:
  monitor:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@735343b667d3e6f658f44d0eca948eb6282f2b76 # v1
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}

      - name: Performance benchmark
        run: |
          echo "üìä Running performance benchmarks..."
          
          # Time dependency installation
          start_time=$(date +%s)
          bun install --frozen-lockfile
          end_time=$(date +%s)
          install_time=$((end_time - start_time))
          echo "Dependencies install time: ${install_time}s"
          
          # Time build process
          start_time=$(date +%s)
          bun run build
          end_time=$(date +%s)
          build_time=$((end_time - start_time))
          echo "Build time: ${build_time}s"
          
          # Time test execution
          start_time=$(date +%s)
          bun run test
          end_time=$(date +%s)
          test_time=$((end_time - start_time))
          echo "Test time: ${test_time}s"
          
          # Package size analysis
          echo "üì¶ Package size analysis:"
          npm pack --dry-run | head -10
          
          total_time=$((install_time + build_time + test_time))
          echo "Total pipeline time: ${total_time}s"
          
          # Set performance thresholds
          if [ $total_time -gt 300 ]; then
            echo "‚ö†Ô∏è Pipeline taking longer than 5 minutes"
          fi

      - name: Dependency analysis
        run: |
          echo "üìã Dependency analysis:"
          bunx npm-check-updates --format group
          
          echo "üîç Bundle size analysis:"
          du -sh node_modules/
          
          echo "üìä Package count:"
          find node_modules -name "package.json" | wc -l