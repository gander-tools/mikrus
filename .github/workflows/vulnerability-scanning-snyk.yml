name: "üêõ Vulnerability Scanning (Snyk)"

# This workflow performs vulnerability scanning using Snyk tool
# Triggers: Push/PR to any branch + can be called by other workflows
# Purpose: Detect security vulnerabilities in dependencies and upload SARIF results to GitHub Security

on:
  push:
  pull_request:
  workflow_call:
    secrets:
      SNYK_TOKEN:
        required: true

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  snyk-vulnerability-scan:
    name: "üîç Snyk: Dependency Vulnerability Detection"
    # Scans dependencies for known vulnerabilities using Snyk database
    # Uploads SARIF results to GitHub Security tab for review
    runs-on: ubuntu-latest
    steps:
      - name: "üì• Repository: Checkout Code"
        # Downloads repository content for vulnerability scanning
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: "‚ö° Runtime: Setup Bun Environment"
        # Configures Bun runtime for dependency installation and scanning
        uses: oven-sh/setup-bun@735343b667d3e6f658f44d0eca948eb6282f2b76 # v2
        with:
          bun-version: latest

      - name: "üíæ Cache: Restore Dependencies"
        # Caches Bun dependencies for faster workflow execution
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: "üì¶ Dependencies: Install Frozen Lockfile"
        # Installs exact dependencies from lockfile for reproducible scans
        run: bun install --frozen-lockfile

      - name: "üõ£Ô∏è Environment: Add CLI Tools to PATH"
        # Makes node_modules/.bin tools available for subsequent steps
        run: echo "./node_modules/.bin" >> $GITHUB_PATH

      - name: "üìä Snyk: Monitor Dependencies"
        # Monitors dependencies for new vulnerabilities in Snyk dashboard
        uses: snyk/actions/node@14818c4695ecc4045f33c9cee9e795a788711ca4
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor

      - name: "üîç Snyk: Vulnerability Detection"
        # Scans dependencies for known vulnerabilities and generates SARIF report
        uses: snyk/actions/node@14818c4695ecc4045f33c9cee9e795a788711ca4
        continue-on-error: true
        id: snyk-test
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif --severity-threshold=high

      - name: "‚úÖ Validation: SARIF Output Check"
        # Validates that Snyk successfully generated SARIF security report
        run: |
          if [ ! -f snyk.sarif ]; then
            echo "::warning::SARIF file not generated by Snyk scan"
            echo "This might indicate authentication issues or no vulnerabilities found"
          else
            echo "::notice::SARIF file generated successfully"
            echo "File size: $(stat -c%s snyk.sarif) bytes"
          fi

      - name: "üì§ Security: Upload SARIF to GitHub"
        # Uploads vulnerability report to GitHub Security tab for review
        uses: github/codeql-action/upload-sarif@3c3833e0f8c1c83d449a7478aa59c036a9165498 # v3
        if: always() && hashFiles('snyk.sarif') != ''
        with:
          sarif_file: snyk.sarif
          category: snyk

      - name: "üìä Report: Vulnerability Scan Summary"
        # Provides detailed summary of Snyk scan results and status
        if: always()
        run: |
          if [ "${{ steps.snyk-test.outcome }}" = "failure" ]; then
            echo "::warning::Snyk found security vulnerabilities"
            echo "Check the Security tab for detailed results"
          elif [ "${{ steps.snyk-test.outcome }}" = "success" ]; then
            echo "::notice::Snyk scan completed - no high/critical vulnerabilities found"
          else
            echo "::error::Snyk scan encountered an unexpected issue"
          fi

