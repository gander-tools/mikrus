name: Maintenance & Monitoring

on:
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  security-events: write

jobs:
  dependency-update:
    name: Dependency Updates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Check for outdated dependencies
        run: |
          echo "üîç Checking for outdated dependencies..."
          bun outdated || true

      - name: Update patch dependencies
        run: |
          echo "üì¶ Updating patch-level dependencies..."
          # Update patch versions only for safety
          bun update --latest

      - name: Run tests after updates
        run: |
          bun install --frozen-lockfile
          echo "./node_modules/.bin" >> $GITHUB_PATH
          bun run test

      - name: Run security audit
        run: |
          audit_output=$(bunx bun audit 2>&1 || true)
          if echo "$audit_output" | grep -E "(critical|high)" -i; then
            echo "‚ùå Security vulnerabilities found after updates!"
            exit 1
          fi

      - name: Create PR for dependency updates
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update dependencies to latest patch versions'
          title: 'Automated Dependency Updates'
          body: |
            ## Automated Dependency Updates
            
            This PR updates dependencies to their latest patch versions.
            
            ### Changes:
            - Updated patch-level dependencies
            - Verified tests still pass
            - Security audit passed
            
            ü§ñ This PR was created automatically by the maintenance workflow.
          branch: automated-dependency-updates
          delete-branch: true

  performance-monitoring:
    name: Performance Monitoring  
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Add node_modules/.bin to PATH
        run: echo "./node_modules/.bin" >> $GITHUB_PATH

      - name: Build project
        run: bun run build

      - name: Run performance benchmarks
        run: |
          echo "üöÄ Running performance benchmarks..."
          
          # CLI startup time
          time_output=$(time -p ./bin/mikrus --help 2>&1 || true)
          echo "CLI startup time: $time_output"
          
          # Build time measurement
          start_time=$(date +%s%N)
          bun run clean-build
          bun run build
          end_time=$(date +%s%N)
          build_time=$(echo "scale=3; ($end_time - $start_time) / 1000000000" | bc -l || echo "N/A")
          echo "Build time: ${build_time}s"
          
          # Bundle size analysis
          if [ -d "build" ]; then
            build_size=$(du -sh build | cut -f1)
            echo "Build size: $build_size"
          fi

      - name: Test installation simulation
        run: |
          echo "üì¶ Testing installation simulation..."
          
          # Create a temporary directory to simulate installation
          mkdir -p /tmp/mikrus-test
          cd /tmp/mikrus-test
          
          # Copy built files
          cp -r $GITHUB_WORKSPACE/build .
          cp -r $GITHUB_WORKSPACE/bin .
          cp $GITHUB_WORKSPACE/package.json .
          
          # Test CLI execution
          chmod +x bin/mikrus
          ./bin/mikrus --help || echo "CLI help command failed"
          ./bin/mikrus --version || echo "CLI version command failed"

  health-check:
    name: Repository Health Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check repository health
        run: |
          echo "üè• Running repository health checks..."
          
          # Check for large files
          echo "Checking for large files..."
          find . -type f -size +10M -not -path "./node_modules/*" -not -path "./.git/*" | head -5
          
          # Check commit history
          echo "Recent commit activity:"
          git log --oneline -10
          
          # Check branch protection
          echo "Checking main branch..."
          git branch -a | grep main
          
          # File count analysis  
          total_files=$(find . -type f -not -path "./node_modules/*" -not -path "./.git/*" | wc -l)
          echo "Total project files: $total_files"
          
          # Code coverage check
          if [ -f "coverage/coverage-summary.json" ]; then
            echo "Code coverage summary:"
            cat coverage/coverage-summary.json | head -10 || echo "Could not read coverage summary"
          fi

  cleanup:
    name: Cleanup & Optimization
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cleanup and optimize
        run: |
          echo "üßπ Running cleanup and optimization..."
          
          # Clean build artifacts
          bun run clean-build
          
          # Remove any temporary files
          find . -name "*.tmp" -type f -delete 2>/dev/null || true
          find . -name ".DS_Store" -type f -delete 2>/dev/null || true
          
          # Check disk usage
          echo "Current directory size:"
          du -sh . 2>/dev/null || echo "Could not calculate directory size"

  security-monitoring:
    name: Extended Security Monitoring
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Extended vulnerability scan
        run: |
          echo "üîí Running extended vulnerability scanning..."
          
          # Check for known vulnerabilities in dependencies
          bunx bun audit || true
          
          # Check package.json for suspicious dependencies
          suspicious_keywords=("bitcoin" "crypto" "mining" "keylogger" "backdoor")
          for keyword in "${suspicious_keywords[@]}"; do
            if grep -i "$keyword" package.json; then
              echo "‚ö†Ô∏è Suspicious keyword found: $keyword"
            fi
          done
          
          # Verify package integrity
          echo "Verifying package.json integrity..."
          jq empty package.json && echo "‚úÖ package.json is valid JSON" || echo "‚ùå package.json is invalid"

  notification:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [dependency-update, performance-monitoring, health-check, cleanup, security-monitoring]
    if: always()
    steps:
      - name: Maintenance summary
        run: |
          echo "üìä Maintenance workflow completed!"
          echo "Dependency updates: ${{ needs.dependency-update.result }}"
          echo "Performance monitoring: ${{ needs.performance-monitoring.result }}"
          echo "Health check: ${{ needs.health-check.result }}"
          echo "Cleanup: ${{ needs.cleanup.result }}"
          echo "Security monitoring: ${{ needs.security-monitoring.result }}"